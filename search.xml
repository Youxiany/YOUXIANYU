<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习CSS.5学习笔记</title>
      <link href="/2025/01/18/css/%E5%AD%A6%E4%B9%A0css.5/"/>
      <url>/2025/01/18/css/%E5%AD%A6%E4%B9%A0css.5/</url>
      
        <content type="html"><![CDATA[<h6 style="font-size:50px;color:#7C5E17;font-family:华文楷体">CSS盒子模型</h6><ol>    <li style="font-size:25px;"><b>CSS长度单位</b></li>    </ol>    <ol>    <li><code>px</code>:像素。</li>    <li><code>em</code>:相对元素<code>font-size</code>的倍数。</li>    <li><code>rem</code>:相对根字体大小，html标签就是根.</li>    <li><code>%</code>:相对父元素计算。</li>    </ol><blockquote><p>CSS中设置长度，必须加单位，否则样式无效！<br><br><br><br></p></blockquote><p style="font-size:30px;color:#26F0E6;font-family:华文楷体">盒子模型的组成</p><p><code>CSS</code>会把所有的<code>HTML</code>元素都看成一个<b>盒子</b>，所有的样式也都是基于这个盒子。</p><ol>    <li><b>margin（外边距）</b>：盒子与外界的距离。（不会影响盒子大小，但会影响盒子的位置）</li>    <li><b>border（边框）</b>:盒子的边框。</li>    <li><b>padding（内边距）</b>:紧贴内容的补白区域。</li>    <li><b>contert（内容）</b>:元素中的文本或后代元素都是它的内容。</li>    </ol><blockquote><p>盒子的大小&#x3D;content+左右padding+左右border。</p></blockquote><br><p style="font-size:30px;color:#26F0E6;font-family:华文楷体">margin注意事项</p><blockquote><p>1.子元素的<code>margin</code>,是参考父元素的<code>content</code>计算的。（因为是父亲的content中承装着子元素）<br>2.上<code>margin</code>、左<code>margin</code>:影响自己的位置；下<code>margin</code>、右<code>margin</code>:影响后面兄弟元素的位置。<br>3.块级元素、行内块级元素，均可完美地设置四个方向的<code>margin</code>；但行内元素，左右<code>margin</code>可以完美设置，上下<code>margin</code>设置无效。<br>4.<code>margin</code>的值也可以是<code>auto</code>,如果给一个<b>块级元素</b>设置左右<code>margin</code>都为<code>auto</code>,该块级元素会在父元素中水平居中。<br>5.<code>margin</code>的值可以是负值。</p></blockquote><p style="font-size:25px;color:#26F0E6;font-family:华文楷体">margin塌陷问题</p><p>什么是<code>margin</code>塌陷？</p><p>&nbsp;&nbsp;第一个元素的<b>上</b><code>margin</code>会作用在父元素上，最后一个子元素的<b>下</b><code>margin</code>会作用在父元素上。<br><br><br>如何解决<code>margin</code>塌陷？</p><ul>    <li>方案一：给父元素设置不为0的<code>padding</code>。</li>    <li>方案二：给父元素设置宽度不为0的<code>border</code>。</li>    <li>方案三：给父元素设置css样式<code>overflow:hidden</code></li>    </ul>    <blockquote><p>处理内容溢出：也是加上voerflow:hidden.</p></blockquote><blockquote><p>隐藏元素的方式<br>vidibility:hidden<br>display:none</p></blockquote><p style="font-size:30px;color:#26F0E6;font-family:华文楷体">布局小技巧</p><p>1.行内元素、行内块元素，可以被父元素当做文本处理。</p><blockquote><p>即：可以像处理文本对齐一样，去处理：行内、行内块在父元素中的对齐。<br>例如：text-align、line-height、text-indent等。</p></blockquote><p>2.如何让子元素，在父亲中<b>水平居中：</p><ul>    <li>若子元素为块元素，给父元素加上：<code>margin:0 auto;</code>。</li>    <li>若子元素为行内元素、行内块元素，给父元素加上：<code>text-align:center</code></li>    </ul> <pre><code>3.如何让子元素，在父亲中&lt;b&gt;垂直居中&lt;/b&gt;:&lt;ul&gt;    &lt;li&gt;若子元素为块元素，给子元素加上：&lt;code&gt;margin-top&lt;/code&gt;，值为：（父元素&lt;code&gt;content&lt;/code&gt;-子元素盒子总高）/2。&lt;/li&gt;    &lt;li&gt;若子元素为行内元素、行内块元素：        让父元素的&lt;code&gt;height=line-height&lt;/code&gt;，每个子元素都加上：&lt;code&gt;vertical-align:middle;&lt;/code&gt;。        补充：若想绝对垂直居中，父元素&lt;code&gt;font-size&lt;/code&gt;设置为&lt;code&gt;0&lt;/code&gt;。&lt;/li&gt;&lt;/ul&gt;                                </code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS基础 </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习CSS.4学习笔记</title>
      <link href="/2025/01/18/css/%E5%AD%A6%E4%B9%A0css.4/"/>
      <url>/2025/01/18/css/%E5%AD%A6%E4%B9%A0css.4/</url>
      
        <content type="html"><![CDATA[<h1 style="font-size:30px;color:#7DFFB5;font-family:华文楷体">CSS列表属性</h1><p><b>列表相关的属性，可以作用在<code>ul</code>、<code>ol</code>、<code>li</code>元素上。</b></p><table border="1">    <tr>        <th>CSS属性名</th>        <th>功能</th>        <th>属性值</th>    </tr>        <tr>            <th><code>tlst-style-type</code></th>            <th>设置列表符号</th>            <th>常用属性如下：                <code>none</code>：不显示前面的标识（很常用！）                <code>square</code>:实心方块                <code>disc</code>：圆形                <code>decimal</code>:数字                <code>lower-roman</code>:小写罗马字                <code>upper-roman</code>:大写罗马字                <code>lower-alpha</code>:小写字母                <code>upper-alpha</code>:大写字母</th>     </tr>         <tr>        <th><code>list-style-position</code></th>        <th>设置列表符号的位置</th>        <th><code>inside</code>:在<code>li</code>的里面            <code>outside</code>:在<code>li</code>的外边</th>    </tr>    <tr>        <th><code>list-style-image</code></th>        <th>自定义列表符号</th>        <th><code>url（图片地址）</code></th>    </tr>    <tr>        <th><code>list-style</code></th>        <th>符合属性</th>        <th>没有数量、顺序的要求</th>    </tr>        </table><h1 style="font-size:30px;color:#7DFFB5;font-family:华文楷体">CSS表格属性</h1><p><b>1.边框相关属性（其他元素也能用）：</b></p><table>    <tr>        <th>CSS属性名</th>        <th>功能</th>        <th>属性值</th>    </tr>    <tr>        <td><code>border-width</code></td>        <td>边框宽度</td>        <td><code>CSS</code>中可用的长度值</td>    </tr>    <tr>        <td><code>bordet-color</code></td>        <td>边框颜色</td>        <td><code>CSS</code>中可用的颜色值</td>    </tr>    <tr>        <td><code>border-style</code></td>        <td>边框风格</td>        <td><code>none</code>默认值            <code>solid</code>实线            <code>dashed</code>虚线            <code>dotted</code>点线            <code>double</code>双实线        </td>    </tr>    <tr>        <td><code>border</code></td>        <td>边框复合属性</td>        <td>没有书量、顺序的要求</td>    </tr>    </table><h1 style="font-size:30px;color:#7DFFB5;font-family:华文楷体">表格独有属性（只有<code>table</code>表情才能使用）：</h1><table>    <tr>        <th>CSS属性名</th>        <th>功能</th>        <th>属性值</th>    </tr>    <tr>        <td><code>table-layout</code></td>        <td>设置了列宽度</td>        <td><code>auto</code>:自动，类款根据内容计算（默认值）            <code>fixed</code>:固定列宽，平均分。</td>    </tr>    <tr>        <td><code>borber-spacing</code></td>        <td>单元格间距</td>        <td><code>CSS</code>中可用的长度值。        生效的前提：单元格边框不能合并</td>    </tr>    <tr>        <td><code>borer-collapse</code></td>        <td>合并单元格边框</td>        <td><code>collapse</code>:合并            <code>separate</code>:不合并</td>    </tr>    <tr>        <td><code>empty-cells</code></td>        <td>隐藏没有内容的单元格</td>        <td><code>show</code>:显示，默认            <code>hide</code>:隐藏</td>    </tr>    <tr>        <td><code>caption-side</code></td>        <td>设置表格标题位置</td>        <td><code>top</code>:上面（默认值）            <code>bottom</code>在表格下面</td></table>    <h1 style="font-size:30px;color:#7DFFB5;font-family:华文楷体">CSS背景属性</h1><table>    <tr>        <th>CSS属性名</th>        <th>功能</th>        <th>属性值</th>    </tr>    <tr>        <td><code>background-color</code></td>        <td>设置背景颜色</td>        <td>符合<code>CSS</code>中的颜色规范的值。默认背景颜色是<code>transparent</code>。</td>    </tr>    <tr>        <td><code>background-image</code></td>        <td>设置背景图片</td>        <td><code>url（图片地址）</code></td>    </tr>    <tr>        <td><code>background-repeat</code></td>        <td>设置背景重复方式</td>        <td><code>repeat</code>:重复，铺满整个元素，默认值<code>repeat-x</code>只在水平方向重复。<code>repeat-y</code>只在垂直方向重复<code>no-repeat</code>:不重复。</td>    </tr>    <tr>        <td><code>background-position</code></td>        <td>设置背景图位置</td>        <td><b>通过关键字设置位置</b>：写两个值，用空格隔开。 水平：<code>left、center、right、</code>垂直：<code>top、center、bottom</code>如果只取一个值，另一个方向的值取center            <b>通过长度指定坐标位置</b>:以元素左上角，为坐标原点，设置图标左上角位置。俩个值，分别是<code>x,y坐标。</code>只写一个值，会被当做x坐标，y坐标取center</td>    </tr>    <tr>        <td><code>background</code></td>        <td>符合属性</td>        <td>没有数量和顺序要求</td>    </tr>    </table> <h1 style="font-size:30px;color:#7DFFB5;font-family:华文楷体">CSS鼠标属性</h1><table>    <tr>        <th>CSS属性名</th>        <th>功能</th>        <th>属性值</th>    </tr>    <tr>        <td><code>cursor</code></td>        <td>设置鼠标光标的样式</td>        <td><code>pointer</code>:小手        <code>move</code>:移动图标        <code>text</code>:文字选择器        <code>crosshair</code>:十字架        <code>wait</code>:等待        <code>hrlp</code>:帮助</td>    </tr>    </table>        ]]></content>
      
      
      <categories>
          
          <category> CSS基础 </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习CSS.3学习笔记</title>
      <link href="/2025/01/17/css/%E5%AD%A6%E4%B9%A0css.3/"/>
      <url>/2025/01/17/css/%E5%AD%A6%E4%B9%A0css.3/</url>
      
        <content type="html"><![CDATA[<h2 style="font-size:45px;color:#5274E3;font-family:华文楷体">CSS 常用文本样式</h2><p style="font-size:20px;font-family:华文楷体"><b>以下是一些常用的 CSS 文本样式：</b></p>   <ul>        <li style="font-size:25px"><b>字体样式</b></li><br>    <li><b>字体类型：</b></li>    <li><b><code>font-family: 'Arial', sans-serif;</code></b>：设置字体为 Arial，如果没有 Arial 字体，则使用系统默认的无衬线字体。</li>    <li><b><code>font-family: 'Times New Roman', serif;</code></b>：设置字体为 Times New Roman，如果没有该字体，则使用系统默认的有衬线字体。</li><br>    <li><b>字体大小：</b></li>    <li><b><code>font-size: 16px;</code></b>：将字体大小设置为 16 像素。</li>    <li><b><code>font-size: 1.2em;</code></b>：字体大小相对于其父元素字体大小的 1.2 倍，这是一种相对单位，常用于保持文本在不同屏幕和设备上的可读性。</li><br>    <li><b>字体粗细：</b></li>    <li><b><code>font-weight: normal;</code></b>：正常粗细，等同于 <b><code>font-weight: 400;</code></b>。</li>    <li><b><code>font-weight: bold;</code></b>：加粗，等同于 <b><code>font-weight: 700;</code></b>，常用于突出显示标题或重要信息。</li>    <li><b><code>font-weight: 100;</code></b>：最细的字体粗细，数值越大，字体越粗，一般有 100、200、300、400、500、600、700、800、900 等等级别。</li><br><hr>    <li style="font-size:25px"><b>文本排版</b></li><br>    <li><b>文本对齐：</b></li>    <li><b><code>text-align: left;</code></b>：文本左对齐，常用于段落文本的默认对齐方式。</li>    <li><b><code>text-align: center;</code></b>：文本居中对齐，适用于标题、重要提示等需要突出显示的文本。</li>    <li><b><code>text-align: right;</code></b>：文本右对齐，可用于一些特定的布局需求，如表格中的数据对齐。</li>    <li><b><code>text-align: justify;</code></b>：两端对齐，常用于报纸、书籍等排版，使文本的左右两端都对齐，但可能会导致单词间距不均匀。</li><br>    <li><b>文本缩进：</b></li>    <li><b><code>text-indent: 2em;</code></b>：首行缩进 2 个字符宽度，符合中文排版习惯，常用于段落首行缩进，增强文本的层次感。</li><br>    <li><b>行高：</b></li>    <li><b><code>line-height: 1.5;</code></b>：行高是字体大小的 1.5 倍，合适的行高可以使文本更易读，避免行与行之间过于拥挤或过于疏远。</li>    <li><b><code>line-height: 24px;</code></b>：将行高固定为 24 像素，适用于需要精确控制行间距的场景。</li><br><hr>    <li style="font-size:25px"><b>文本修饰</b></li><br>    <li><b>文本颜色：</b></li>    <li><b><code>color: #ff0000;</code></b>：设置文本颜色为红色，使用十六进制颜色代码。</li>    <li><b><code>color: rgb(0, 0, 255);</code></b>：设置文本颜色为蓝色，使用 RGB 颜色模式。</li>    <li><b><code>color: rgba(0, 128, 0, 0.5);</code></b>：设置文本颜色为半透明的绿色，其中 0.5 表示透明度。</li><br>    <li><b>文本装饰：</b></li>    <li><b><code>text-decoration: none;</code></b>：去除文本装饰，常用于链接，使其看起来像普通文本。</li>    <li><b><code>text-decoration: underline;</code></b>：给文本添加下划线，可用于强调或表示链接。</li>    <li><b><code>text-decoration: overline;</code></b>：给文本添加上划线，较少使用，可用于一些特殊效果。</li>    <li><b><code>text-decoration: line-through;</code></b>：给文本添加删除线，表示文本被删除或不再有效。</li><br><hr>    <li style="font-size:25px"><b>其他</b></li><br>    <li><b>字母间距：</b></li>    <li><b><code>letter-spacing: 1px;</code></b>：字母间距增加 1 像素，可以使文本看起来更宽敞，常用于标题或需要强调的文本。</li><br>    <li><b>单词间距：</b></li>    <li><b><code>word-spacing: 2px;</code></b>：单词间距增加 2 像素，对英文等以空格分隔单词的语言有效，可改善文本的视觉效果。</li>    <li><b>文本转换：</b></li>    <li><b><code>text-transform: uppercase;</code></b>：将文本转换为大写，常用于标题或缩写词。</li>    <li><b><code>text-transform: lowercase;</code></b>：将文本转换为小写。</li>    <li><b><code>text-transform: capitalize;</code></b>：将每个单词的首字母大写，适用于标题或需要突出显示的文本。。</li>    </ul><p style="font-size:30px;font-weight: bold;font-family:华文楷体">vertical-align</p><ul>    <li>属性名：<code>vertical-align</code>。</li>    <li>作用:用于指定<code>同一行元素之间</code>，或<code>表格单元格</code>内文字的<code>垂直对齐方式</code>。</li>    <li>常用值：</li>    </ul>    <ol>    <li><code>baseline</code>(默认值)：使元素的基线与父元素的基线对齐。</li>    <li><code>top</code>:使元素的<code>顶部</code>与其<code>所在行的顶部</code>对齐。</li>    <li><code>middle</code>:使元素的<code>中部</code>与<code>父元素的基线</code>加上父元素字母<code>x</code>的一半。</li>    <li><code>bottom</code>:使元素的<code>底部</code>与其<code>所在行的底部</code>对齐。</li>    </ol><blockquote><p>注意：<code>vertical-align</code>不能控制块元素。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS基础 </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习CSS.2学习笔记</title>
      <link href="/2025/01/17/css/%E5%AD%A6%E4%B9%A0css.2/"/>
      <url>/2025/01/17/css/%E5%AD%A6%E4%B9%A0css.2/</url>
      
        <content type="html"><![CDATA[<h1 style="font-size:45pxpx;color:#47F1EF;font-family:华文楷体">伪类选择器</h1><ul>    <li>概念</li>    </ul><blockquote><p>作用：选中特殊状态的元素。<br>如何理解“伪”？-虚假的，不是真的。<br>如何理解“伪类”？-像类（class），但不是类，是元素的特殊状态。</p></blockquote><ul>    <li>常用伪类选择器</li>    </ul>    <p><b>一、动态伪类：</b></p><ol>    <li><code>:link</code>超链接<code>未被访问</code>的状态。</li>    <li><code>:visted</code>超链接<code>访问过</code>的状态。</li>    <li><code>:hover</code>鼠标<code>悬停</code>在元素上的状态。</li>    <li><code>:active</code>元素激活的状态。</li>    <li><code>:focus</code>获取焦点的元素。</li>    </ol>    <blockquote><p>表达类元素才能使用<code>:focus</code>伪类。<br>当用户：点击元素、触摸元素、或通过键盘的“tab”建等方式，选择元素时，就是获得焦点。</p></blockquote><p><b>二、常用结构伪类：</b></p><ul type="circle">    <li>常用的</li>    </ul>     <ol>    <li><code>:first-child</code>所用兄弟元素中的<code>第一个。</code></li>    <li><code>:last-child</code>所有元素中的<code>最后一个。</code></li>    <li><code>:nth-child(n)</code>所有兄弟元素中的<code>第n个。</code></li>    <li><code>:first-of-type</code>所有同类型兄弟元素的<code>第一个。</code></li>    <li><code>:last-of-type</code>所有同类型兄弟中的最后一个。</li>    <li><code>:nth-of-type(n)</code>所有同类型兄弟元素中的<code>第n个。</code>    </ol>  <p><b>三、否定伪类：</b></p> <blockquote><p><code>:not(选择器)</code>派纯满足括号中条件的元素。</p></blockquote><p><b>四、UI伪类</b></p><ol>    <li><code>:checked</code>被选中的复选框或单选框按钮。</li>    <li><code>:enable</code>可用的表单元素（没有<code>didabled</code>属性）。</li>    <li><code>:disabled</code>不可用的表单元素（有<code>didabled</code>属性）。</li>    </ol><p style="font-size:25px"><b>伪元素选择器</b></p><ul>    <li>作用：<code>选中元素</code>中的一些特殊位置。</li>    <li>常用伪元素：<li>    <ol>        <li><code>::first-letter</code>选中元素中的<code>第一个文字</code>。</li>        <li><code>::first-line</code>选中元素中的<code>第一行文字</code>。</li>        <li><code>::selection</code> 选中<code>被鼠标选中的</code>内容。</li>        <li><code>::placeholder</code>选中输入框的<code>提示文字</code>。</li>        <li><code>::before</code>在元素<code>最开始</code>的位置，创建一个子元素（必须用<code>content</code>属性指定内容）。</li>        <li><code>::after</code>在元素<code>最后</code>的位置，创建一个子元素（必须用<code>content</code>属性指定内容）。</li>              </ol></ul><p><b>选择器优先级</b></p><p><b>CSS选择器优先级是指当多个CSS规则应用于同一个元素时，用来决定哪个规则生效的顺序。优先级从高到低依次为：</b></p><p><b>一、内联样式（Inline styles）</b></p><li>内联样式是直接在HTML元素的<code>style</code>属性中定义的样式。例如<code>&lt;div  style="color: red;"&gt;内容&lt;/div"&gt;</code>，这种样式具有最高的优先级，因为它直接作用于元素本身，能够覆盖外部样式表和内部样式表中的其他选择器定义的样式。</li><p><b>二、ID选择器（ID selectors）</b></p><li>ID选择器使用<code>#</code>加元素的ID值来选择元素，如<code>#header&#123;background-color: blue;&#125;</code>。在页面中，ID应该是唯一的，所以ID选择器的优先级很高。它仅次于内联样式，能够覆盖类选择器、属性选择器等定义的样式。</li><p><b>三、类选择器、属性选择器和伪类选择器（Class selectors, Attribute selectors, and Pseudo-classes）</b></p><ol>       <li><b>类选择器</b>：使用<code>.</code>加类名来选择元素，如<code>.container&#123;width: 100px;&#125;</code>。它可以为具有相同类名的多个元素设置统一的样式。</li>    <li><b>属性选择器</b>：通过元素的属性来选择元素，例如<code>input[type="text"]&#123;border: 1px solid black;&#125;</code>，它选择所有<code>type</code>属性为<code>text</code>的<code>input</code>元素。</li><li><b>伪类选择器</b>：用于定义元素的特殊状态，如<code>:hover</code>（鼠标悬停时）、<code>:active</code>（元素被激活时）等，例如<code>a:hover&#123;color: green;&#125;</code>。这三者优先级相同，都高于标签选择器和通配符选择器。</li>    <p><b>四、标签选择器和伪元素选择器（Type selectors and Pseudo-elements）</b></p><ol>    <li><b>标签选择器</b>：直接使用元素的标签名来选择元素，如<code>div&#123;margin: 10px;&#125;</code>，它会选择页面上所有的<code>div</code>元素。</li><li><b>伪元素选择器</b>：用于选择元素的特定部分，如<code>::before</code>和<code>::after</code>。例如<code>div::before&#123;content: "前缀";&#125;</code>，会在<code>div</code>元素内容前插入“前缀”文本。它们的优先级相同，低于类选择器等。</li>    <p><b>五、通配符选择器、继承样式和浏览器默认样式<code>（Universal selectors, Inherited styles, and Default browser styles</code>）</b></p><ol>        <li><b>通配符选择器</b>：使用<code>*</code>来选择页面上所有的元素，如<code>*&#123;box-sizing: border-box;&#125;</code>，它的优先级很低。</li>    <li><b>继承样式</b>：某些CSS属性（如<code>color、font-size</code>等）会从父元素继承到子元素，这种继承而来的样式优先级也很低。</li>    <li><b>浏览器默认样式</b>：浏览器自身为元素定义的一些初始样式，如果没有其他样式覆盖，这些默认样式会生效，它的优先级是最低的。</li>    <blockquote><p>当优先级相同时，CSS规则的定义顺序也会影响最终生效的样式。在同一个CSS文件中，后定义的规则会覆盖先定义的规则；如果多个CSS文件同时作用于页面，后加载的CSS文件中的规则会覆盖先加载的CSS文件中的规则（前提是选择器优先级相同）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS基础 </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习CSS.1学习笔记</title>
      <link href="/2025/01/16/css/%E5%AD%A6%E4%B9%A0css.1/"/>
      <url>/2025/01/16/css/%E5%AD%A6%E4%B9%A0css.1/</url>
      
        <content type="html"><![CDATA[<p style="text-align:center;color:#DB7A0B;font-family:华文楷体;font-size:60px">入门CSS</p><div>S<h1 style="color:#47F1EF;font-size:39px;font-family:华文楷体">CSS简介</h1></div><p style="font-size:30px;font-family:华文楷体"><b>1.什么是 CSS？</b></p><ul>    <li>CSS 指的是层叠样式表* (Cascading Style Sheets)</li>    <li>CSS 描述了<b>如何在屏幕、纸张或其他媒体上显示 HTML 元素</b></li>    <li>CSS <b>节省了大量工作</b>。它可以同时控制多张网页的布局</li>    <li>外部样式表存储在<b> CSS 文件中</b></li></ul><h1 style="color:#47F1EF;font-size:39px;font-family:华文楷体">CSS 语法</h1><p style="font-size:19px">CSS（层叠样式表）用于设置HTML页面中元素的样式，其语法主要包括以下几个部分：</p><p style="font-size:20px"><b>1.选择器</b></p><div>    <p>选择器用于选择页面中的元素，以便为其应用样式。常见的选择器类型有：</p>    <ul>        <li><b>元素选择器</b>：直接使用元素名称，如p选择页面中所有的&lt;p&gt;元素。</li>        <li><b>类选择器</b>：以<code>.</code>开头，如<code>.my-class</code>选择页面中所有<code>class="my-class"</code>的元素。</li>        <li><b>ID选择器</b>:以<code>#</code>开头，如<code>#my-id</code>选择页面中<code>id="my-id"</code>的元素。</li>        <li><b>属性选择器</b>:以<code>[attribute]</code>形式，如<code>[type="text"]</code>选择所有<code>type</code>属性值为<code>text</code>的元素。</li>        <li><b>伪类选择器</b>:以<code>:</code>开头，如<code>:hover</code>选择鼠标悬停的元素，<code>:nth-child(n)</code>选择其父元素的第<code>n</code>个子元素等。</li>        <li><b>伪元素选择器</b>:以<code>:before</code>在元素内容前插入内容，<code>::after</code>在元素内容后插入内容等。</li>        <li><b>组合选择器</b>:可以将多个选择器组合使用，如<code>div p</code>选择<code>&lt;div&gt;</code>元素内的所有<code>&lt;p&gt;</code>元素，<code>.class1.class2</code>选择同时具有<code>class1</code>和<code>class2</code>类的元素等。</li>        </ul>        </div><p style="font-size:20px"><b>2.声明器</b></p><p>选择器后面跟着一个花括号<code>&#123;&#125;</code>，里面包含一个或多个声明，用于定义元素的样式。每个声明由属性和值组成，属性和值之间用英文冒号<code>:</code>分隔，每个声明之间用英文分号<code>;</code>分隔。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p style="font-size:25px"><b>示例:</b></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选择所有段落元素，设置字体颜色为红色，字体大小为16px */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择id为&quot;header&quot;的元素，设置背景颜色为蓝色，文字颜色为白色 */</span></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择类名为&quot;highlight&quot;的元素，鼠标悬停时设置背景颜色为黄色 */</span></span><br><span class="line"><span class="selector-class">.highlight</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择所有input元素，且type属性值为&quot;text&quot;，设置边框为1px实线黑色 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CSS的语法简洁而强大，通过合理使用选择器和声明块，可以灵活地为HTML页面中的元素设置各种样式。</p></blockquote><h1 style="color:#47F1EF;font-size:39px;font-family:华文楷体">CSS 样式</h1><p>有三种主要的插入CSS样式表的方法，分别是内联样式、内部样式表和外部样式表。以下是详细介绍：</p><p style="font-size:20px"><b>1. 内联样式（Inline CSS）</b></p><ul>    <li><b>定义</b>:直接在HTML元素的标签中使用<code>style</code>属性来添加CSS样式。</li>    <li><b>使用方法</b>:在元素标签中添加<code>style="样式规则"</code>，样式规则中包含属性和值，属性和值之间用英文冒号分隔，多个样式规则之间用英文分号分隔。例如：</li>    </ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 16px;&quot;</span>&gt;</span>这是一段红色的文本，字体大小为16px。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul>    <li><b>特点</b>:</li>   <ul type="circle">    </ul>        <li>优点：可以直接在元素上应用样式，对于单个元素的样式修改非常方便，可以快速看到效果。</li>        <li>缺点：样式与结构混合，违反了CSS与HTML分离的原则，不利于维护和重用。当需要对多个元素应用相同的样式时，代码会变得冗余。</li></ul>        <p style="font-size:20px"><b>2. 内部样式表（Internal CSS）</b></p><ul>    <li><b>定义</b>:在HTML文档的<code>&lt;head&gt;</code>部分使用<code>&lt;style&gt;</code>标签来定义CSS样式。</li>    <li><b>使用方法</b>:在<code>&lt;head&gt;</code>标签内添加<code>&lt;style&gt;</code>标签，在<code>&lt;style&gt;</code>标签内编写CSS选择器和对应的样式规则。例如：</li>    </ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.highlight</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段蓝色的文本，字体大小为14px。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span>&gt;</span>这是一个黄色背景的div。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul>    <li><b>特点</b>:</li>       </ul><ul type="circle">        <li>优点：样式与HTML结构在同一文件中，方便查看和修改，适用于单个页面的样式定义。可以避免内联样式带来的代码冗余问题。</li>        <li>缺点：样式仍然局限于单个HTML文件，不利于多个页面之间的样式共享和维护。当网站包含多个页面时，每个页面都需要重复编写相同的样式代码。</li></ul><p style="font-size:20px"><b>3. 外部样式表（External CSS）</b></p><ul>    <li><b>定义</b>:将CSS样式写在一个单独的<code>.css</code>文件中，然后在HTML文档中通过<code>&lt;link&gt;</code>标签引入该样式表。</li>    <li><b>使用方法</b>:首先创建一个CSS文件（如<code>styles.css</code>），在其中编写CSS样式规则。然后在HTML文档的<code>&lt;head&gt;</code>部分使用<code>&lt;link&gt;</code>标签引入该CSS文件。例如：</li>    </ul><ul type="circle">    <li><code>styles.css</code>文件内容：</li>    </ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul type="circle">    <li>HTML文件内容：</li>    </ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>这是页面头部。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段绿色的文本，字体大小为18px。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul>    <li><b>特点</b>:</li>       </ul><ul type="circle">        <li>优点：实现了CSS与HTML的完全分离，符合Web开发的最佳实践。样式文件可以被多个HTML页面共享，便于维护和更新。当需要修改样式时，只需修改一个CSS文件，所有引用该文件的页面都会自动更新样式。</li>        <li>缺点：需要额外的文件管理，对于非常简单的页面或临时的样式修改，可能会显得有些繁琐。</li></ul><p style="font-size:20px"><b>样式优先级</b></p><div>    当同时使用以上三种方法时，样式的优先级从高到低依次为：内联样式 > 内部样式表 > 外部样式表。此外，还可以通过使用<code>!important</code>规则来提高某个样式规则的优先级，但应谨慎使用，因为它可能会导致样式难以维护。例如：</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这会使&lt;p&gt;元素的文本颜色无论如何都显示为红色，即使有其他更高优先级的样式规则存在。*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red <span class="meta">!important</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS基础 </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识HTML.3学习笔记</title>
      <link href="/2025/01/15/html/%E5%AD%A6%E4%B9%A0html.3/"/>
      <url>/2025/01/15/html/%E5%AD%A6%E4%B9%A0html.3/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align:center;font-size:60px;color:green;font-family:华文楷体">块元素和行内元素</h1><p><dfn>一、定义和用法</dfn></p><blockquote><p>div 标签定义 HTML 文档中的分割或部分（分区或小节，division&#x2F;section）。<br>div 标签可以把文档分割为独立的、不同的部分。它可以用作严格的组织工具，并且不使用任何格式与其关联。<br>任何类型的内容都可以放在 div 标签内！div 标签可用作 HTML 元素的容器，然后使用 CSS 设置样式或使用 JavaScript 进行操作。<br>如果用 id 或 class 来标记 div，那么该标签的作用会变得更加有效。通过使用 class 或 id 属性，可以轻松地对 div 标签设置样式。<br>注意：默认情况下，浏览器总是在 div 元素前后放置一个换行符。</p></blockquote><p>二、用法</p><blockquote><p>div 是块级元素。这意味着它的内容自动地开始一个新行。实际上，换行是 div 固有的唯一格式表现。可以通过 div 的 class 或 id 应用额外的样式。<br>不必为每一个 div 都加上类或 id，虽然这样做也有一定的好处。<br>可以对同一个 div 元素应用 class 或 id 属性，但是更常见的情况是只应用其中一种。这两者的主要差异是，class 用于元素组（类似的元素，或者可以理解为某一类元素），而 id 用于标识单独的唯一的元素。</p></blockquote><h1 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.cities &#123;</span><br><span class="line">    background-color:black;</span><br><span class="line">    color:white;</span><br><span class="line">    margin:20px;</span><br><span class="line">    padding:20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;cities&quot;&gt;</span><br><span class="line">&lt;h2&gt;London&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt; </span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 style="text-align:center;font-size:60px;font-family:华文楷体;color:green">表单</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot;&gt;  &lt;!--输入框--&gt;</span><br><span class="line">&lt;button&gt;SEARCH&lt;button&gt; &lt;!--搜索--&gt;</span><br></pre></td></tr></table></figure><p><b><code>表单常用属性</code></b></p><pre>1.作用于form标签（表单）action:用于指定表单的提交地址（需要与后端沟通后确定）。target:用于控制表单提交后，如何打开页面，常用值如下：        _self:在本窗口打开。        _blank:在新窗口打开。2.作用于input标签（输入框）method:用于控制表单的提交方式。type:设置输入框的类型，目前用到的值是text,表示普通文本。name:用于指定提交数据的名字，（需要与后端人员沟通后确定）。</pre><p><code>示例</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://search.jd.com/Search&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span><span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>京东搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p style="font-family:华文楷体;color:green;font-size:20px">表单_常用控件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">认识新属性：value(值):可以控制输入框的默认值</span><br><span class="line">           maxlength(最大长度)：可以输入最大的字符长度</span><br></pre></td></tr></table></figure><hr><p style="font-family:华文楷体;color:green;font-size:20px">表单_单选框与多选框</p><ul>    <b><li>单选框</li></b>    </ul>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;女</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;男</span><br></pre></td></tr></table></figure><blockquote><p>常用属性性如下：<br>name:数据的名称，注意：想要单选效果，多个radio的name属性值要保持一致。<br>value：提交的数据值<br>checked:让该单选按钮默认选中。</p></blockquote><ul>    <b><li>复选框</li></b>    </ul>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;exercise&quot;</span>&gt;</span>运动</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reading&quot;</span>&gt;</span>阅读</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;swimming&quot;</span>&gt;</span>游泳</span><br></pre></td></tr></table></figure><blockquote><p>常用属性性如下：<br>checked：让该复选框默认选中。</p></blockquote><hr><p style="font-family:华文楷体;color:green;font-size:20px">表单_隐藏域</p><ul>    <b><li>隐藏域</li></b>    </ul>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;page&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用户不可见的一个区域，作用是：提交表单的时候，携带一些固定的数据。</p></blockquote><hr><ul>    <b><li>提交按钮</li></b>    </ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hatton</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">hatton</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>1.button标签type属性的默认值是submit。<br>2.button不要指定name属性。<br>3.input标签编写的按钮，使用value属性指定按钮文字。</p></blockquote><ul>    <b><li>重置按钮</li></b>    </ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul>    <b><li>普通按钮</li></b>    </ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确定&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>普通按钮的type值为button,若不写type值是submit会引起表单的提交。</p></blockquote><hr><p style="font-family:华文楷体;color:green;font-size:20px">表单_文本域和下拉框</p><ul>    <b><li>文本域</li></b>    </ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">txtarea</span> <span class="attr">name</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;22&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;3&quot;</span>&gt;</span>文本域<span class="tag">&lt;/<span class="name">txtarea</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>常用属性如下：<br>1.rows：指定默认显示的行数，会影响文本域的高度。<br>2.cols:指定默认显示的列数，会影响文本域的宽度。<br>3.不能编写type属性，其他属性，与普通文本输入框一致。</p></blockquote><ul>    <b><li>下拉框</li></b>    </ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;guangzhou&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span> <span class="attr">selected</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>常用属性及注意事项：<br>1.name:指定数据的名称。<br>2.option标签设置value属性，如果没有value属性，提交的数据是option中间的文字;如果设置了value属性，提交的数据就是value的值（建议设置value属性）<br>3.option标签设置了selected属性，表示默认选中。</p></blockquote><hr><p style="font-family:华文楷体;color:green;font-size:20px">表单_禁用表单控件</p><ul>    <b><li>禁用表单控件</li></b>    </ul><blockquote><p>给表单控件的标签设置disabled即可禁用表单控件。<br>input、textarea、button、select、option都可以设置disabled属性</p></blockquote><p style="font-family:华文楷体;color:green;font-size:20px">表单_label标签</p><ul>    <b><li>表单label标签</li></b>    </ul>    <blockquote><p>label标签可与表单控件相关联，关联之后点击文字，与之对应的表单控件就会获取焦点。两种与label关联方式如下：<br>1.让label标签的form属性的值等于表单控件的id。<br>2.把表单控件套在label标签的里面。</p></blockquote><h1 style="text-align:center;font-size:60px;font-family:华文楷体;color:green">框架标签</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.taobao.com&quot;</span><span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span><span class="attr">width</span>=<span class="string">&quot;300&quot;</span><span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span>taobao<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>与超链接的target属性配合使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.taobao.com&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;clj&quot;</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;clj&quot;</span>  <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">htight</span>=<span class="string">&quot;300&quot;</span> &gt;</span>taobao<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>与表单的target属性配合使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.taobao.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;clj&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;clj&quot;</span>  <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">htight</span>=<span class="string">&quot;300&quot;</span> &gt;</span>taobao<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>  </span><br></pre></td></tr></table></figure><table>    <tr>        <th>标签名</th>        <th>功能和语义</th>        <th>属性</th>        <th>单/双标签</th>        </tr>    <tr>        <th>iframe</th>        <th>框架（在页面中嵌入其他文件）</th>        <th>name:框架名字，可以与target属性配合。            width:框架的宽。            height：框架的高。            frameborder:是否显示边框，值：0或者1。</th>        <th>双</th>    </tr>  </table>    <blockquote><p>iframe标签的实际应用：<br>    1.在网页中嵌入广告。<br>    2.与超链接或表单的target配合，展示不同的内容。</p></blockquote><p style="font-family:华文楷体;color:green;font-size:20px">HTML 字符实体</p><p><code><b>字符实体</b>由三部分组成：一个&和一个实体名称（或者一个#和一个实体编号），最后加上一个分号<b>;</b> 。</code></p>]]></content>
      
      
      <categories>
          
          <category> HTML基础 </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio Code </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识HTML.2学习笔记</title>
      <link href="/2025/01/14/html/%E5%AD%A6%E4%B9%A0html.2/"/>
      <url>/2025/01/14/html/%E5%AD%A6%E4%B9%A0html.2/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align:center;font-size:60px;color:green;font-family:华文楷体;">HTML 颜色</h1><p><b><dfn>颜色值</dfn></b></p><p>颜色由一个十六进制符号来定义，这个符号由红色、绿色和蓝色的值组成（RGB）。每种颜色的最小值是 0（十六进制：#00）。最大值是 255（十六进制：#FF）。<p>    <p><b><dfn>在HTML中应用16进制颜色</dfn></b><br><cite>设置文本颜色</cite></p><blockquote><p>可以通过CSS的color属性来设置文本颜色。例如：   </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=&quot;color:#FF5733;&quot;&gt;这是一段红色的文本。&lt;/p&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，段落p中的文本颜色被设置为#FF5733，这是一种橙红色。</p></blockquote><p><cite>设置背景颜色</cite></p><blockquote><p>使用background-color属性可以设置元素的背景颜色。例如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#333399; width:200px; height:100px;&quot;</span>&gt;</span></span><br><span class="line">  这是一个有背景颜色的div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里设置了一个div元素的背景颜色为#333399，这是一种深蓝色。同时，通过设置width和height属性，定义了div的大小，以便更好地展示背景颜色效果。</p></blockquote><p><cite>设置边框颜色</cite></p><blockquote><p>如果要给元素添加边框并设置边框颜色，可以使用border属性。例如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border:2px solid #FFD700; width:200px; height:100px;&quot;</span>&gt;</span></span><br><span class="line">  这是一个有黄色边框的div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，div元素有一个2像素宽的实线边框，边框颜色为#FFD700，即金色。通过这种方式，可以为网页中的各种元素添加具有特定颜色的边框，增强页面的视觉效果。<br>如何使用样式<br>当浏览器读到一个样式表，它就会按照这个样式表来对文档进行格式化。有以下三种方式来插入样式表：</p></blockquote><p><cite>外部样式表</cite></p><blockquote><p>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p><cite>内部样式表</cite></p><blockquote><p>当单个文件需要特别样式时，就可以使用内部样式表。你可以在 head 部分通过 style 标签定义内部样式表。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">body &#123;background-color: red&#125;</span><br><span class="line">p &#123;margin-left: 20px&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p><cite>内联样式</cite></p><blockquote><p>当特殊的样式需要应用到个别元素时，就可以使用内联样式。使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。以下实例显示出如何改变段落的颜色和左外边距。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=&quot;color: red; margin-left: 20px&quot;&gt;</span><br><span class="line">This is a paragraph</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h1 style="text-align:center;font-size:60px;color:green;font-family:华文楷体;">HTML 超链接</h1><p><code>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。</code></p><blockquote><p>当您把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手。<br>我们通过使用 《a》 标签在 HTML 中创建链接。<br>有两种使用 《a》 标签的方式：<br>通过使用 href 属性 - 创建指向另一个文档的链接<br>通过使用 name 属性 - 创建文档内的书签</p></blockquote><p><code>HTML中的链接是通过《a》（anchor）标签来创建的，它允许用户从一个网页跳转到另一个网页、网页的某个部分，或者打开一个文件等。以下是关于HTML链接的详细介绍：</code></p><p>一、基本语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接目标的URL&quot;</span>&gt;</span>链接文字或内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>href属性是关键，它指定了链接的目标地址。可以是网页的URL、文件的路径、网页内部的锚点等。<br>链接文字或内容是显示在网页上的部分，用户点击这部分内容就会触发链接跳转。可以是纯文本，也可以是图片或其他HTML元素。</p></blockquote><p>二、链接类型<br>1.外部链接<br><code>这是指向其他网站的链接。例如，要创建一个链接到百度首页的链接，可以这样写：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>访问百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当用户点击“访问百度”这几个字时，浏览器会打开百度的首页。</p></blockquote><p>2.内部链接<br><code>内部链接是指在同一网站内部不同页面之间的链接。例如，一个网站有首页（index.html）、关于我们（about.html）和联系我们（contact.html）三个页面，可以在首页创建一个链接到关于我们页面的链接：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;about.html&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里假设这些页面都在同一个目录下。如果页面在不同的目录，需要正确设置相对路径或绝对路径。例如，如果关于我们页面在pages目录下，链接可以写成：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;pages/about.html&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.锚点链接</p><blockquote><p>锚点链接用于在同一页面内快速跳转到特定位置。首先需要在目标位置设置一个锚点，使用《a》标签的name属性（HTML5中推荐使用id属性）来定义锚点。例如，在页面底部有一个段落：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;section1&quot;</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第一部分的内容……<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>然后在页面顶部可以创建一个链接到这个锚点的链接：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#section1&quot;</span>&gt;</span>跳转到第一部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">当用户点击这个链接时，页面会滚动到<span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;section1&quot;</span>&gt;</span>所在的位置。</span><br></pre></td></tr></table></figure><p>三、链接的其他属性<br>1.target属性</p><blockquote><p>这个属性可以控制链接在何处打开。常用的值有：</p></blockquote><p><code>_self：在当前窗口或标签页中打开链接，这是默认值。<br>_blank：在新窗口或新标签页中打开链接。例如：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.example.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>在新标签页打开示例网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>点击这个链接会在新标签页中打开<a href="https://www.example.com./">https://www.example.com。</a></p></blockquote><p><code>_parent：在父窗口或标签页中打开链接，主要用于框架（frame）或嵌套的网页场景。<br>_top：在整个浏览器窗口中打开链接，也会清除所有框架。</code><br>2.title属性<br><code>为链接提供额外的信息，当用户将鼠标悬停在链接上时，会显示这个提示信息。例如：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.example.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是一个示例网站&quot;</span>&gt;</span>示例网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>鼠标悬停在“示例网站”链接上时，会显示“这是一个示例网站”的提示。<br>HTML链接是网页之间相互连接的桥梁，合理使用链接可以极大地提升用户体验和网站的导航性。</p></blockquote><h1 style="text-align:center;font-size:60px;color:green;font-family:华文楷体;">HTML 图像</h1><p><code>在HTML中插入图像主要通过《img》标签来实现，这是一种非常简单但功能强大的方式，可以让网页更加生动和富有表现力。以下是关于如何在HTML中插入图像的详细介绍：</code><br>一、基本语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像的URL或路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图像的替代文本&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>src属性：这是必需的属性，用于指定图像的源路径。可以是相对路径（相对于当前HTML文件的位置）或绝对路径（完整的URL）。</p></blockquote><p><code>alt属性：也是很重要的属性，它提供了图像的替代文本。当图像由于某些原因无法显示时（如网络问题、图像路径错误等），浏览器会显示这个替代文本。此外，对于使用屏幕阅读器的用户来说，alt文本可以帮助他们了解图像的内容，从而提高网页的可访问性。</code></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>1.使用相对路径插入图像<br><code>假设你有一个名为image.jpg的图像文件，它和你的HTML文件位于同一个目录下，你可以这样插入图像：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图像&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>如果图像文件位于一个名为images的子目录中，路径应该是：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图像&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.使用绝对路径插入图像<br><code>如果你想插入一个来自互联网的图像，可以使用完整的URL：</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://example.com/images/image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;来自外部网站的图像&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二、其他有用的属性<br>1.width和height属性</p><blockquote><p>这两个属性可以用来指定图像的显示宽度和高度，单位通常是像素。这可以帮助你控制图像在网页中的大小，使其更好地适应布局。例如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意，如果只设置其中一个属性，图像会按比例自动调整另一个维度的大小，以保持图像的纵横比。</code><br>2.title属性</p><blockquote><p>和链接的title属性类似，title属性为图像提供额外的信息，当用户将鼠标悬停在图像上时，会显示这个提示信息。</p></blockquote><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图像&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是一个示例图像&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 style="text-align:center;font-size:60px;color:green;font-family:华文楷体;">HTML 表格，列表</h1><p>一、基本语法<br><code>HTML表格是通过table标签来创建的，表格由行（《tr》）、单元格（td或th）组成。其中，th用于定义表头单元格，通常显示为加粗和居中，而td用于定义普通单元格。</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.表格的组成部分</p><blockquote><p>1.table标签：定义整个表格。<br>2.tr标签：定义表格的行。<br>3.th标签：定义表头单元格，通常用于第一行来描述列的内容。<br>4.td标签：定义普通单元格，用于包含数据。</p></blockquote><p>2.表格的属性</p><blockquote><p>虽然HTML5中许多表格属性已经被CSS所取代，但仍然有一些属性可以用来控制表格的基本行为：<br>border属性：用于设置表格边框的宽度。例如，table border&#x3D;”1”会创建一个有边框的表格。不过，现在更推荐使用CSS来控制边框样式。<br>cellpadding和cellspacing属性：分别用于设置单元格内内容与边框的距离（内边距）和单元格之间的距离（外边距）。同样，这些现在也推荐使用CSS来控制。</p></blockquote><p><code>在HTML中，列表是一种非常有用的元素，用于组织和显示一系列相关的信息。HTML提供了三种主要的列表类型：无序列表（ul）、有序列表（ol）和描述列表（dl）。每种列表类型都有其特定的用途和格式。</code><br>一、无序列表（ul）</p><blockquote><p>无序列表用于表示没有特定顺序的项目列表。列表项使用li（list item）标签定义。</p></blockquote><p>1.基本语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>在浏览器中，这将显示一个带有项目符号的列表。</code><br>二、有序列表（ol）<br><dfn>有序列表用于表示有特定顺序的项目列表。列表项同样使用li标签定义。有序列表的列表项会自动编号。</dfn><br>2.基本语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>在浏览器中，这将显示一个带有数字编号的列表。</code><br>三、描述列表（dl）<br><dfn>描述列表用于表示术语和描述的列表。它由dl标签定义，每个术语使用dt（definition term）标签定义，每个描述使用dd（definition description）标签定义。</dfn><br>1.基本语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>术语1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>术语2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>在浏览器中，这将显示一个术语和描述的列表，术语通常会加粗显示。</code><br><dfn>四、列表的嵌套</dfn></p><blockquote><p>列表可以嵌套使用，即在一个列表项内部再创建一个新的列表。这在需要表示层次结构时非常有用。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">复制</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>水果</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>橙子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>蔬菜</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>胡萝卜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>西红柿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>土豆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>在浏览器中，这将显示一个嵌套的无序列表，其中每个主要类别（水果和蔬菜）下面有子类别。</code></p>]]></content>
      
      
      <categories>
          
          <category> HTML基础 </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio Code </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html.1学习笔记</title>
      <link href="/2025/01/14/html/%E5%AD%A6%E4%B9%A0html.1/"/>
      <url>/2025/01/14/html/%E5%AD%A6%E4%B9%A0html.1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>HTML 注释</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--（文本）--&gt;</span><br></pre></td></tr></table></figure><h1 style="text-align:center;font-size:60px"> HTML 样式</h1><h2 style="text-align:center;font-size:30px;font-family:华文楷体">HTML 的 style 属性</h2><blockquote><p>style 属性用于改变 HTML 元素的样式。</p></blockquote><p>1.style 属性的作用:</p><blockquote><p>提供了一种改变所有 HTML 元素的样式的通用方法。<br>样式是 HTML 4 引入的，它是一种新的首选的改变 HTML 元素样式的方式。通过 HTML 样式，能够通过使用 style 属性直接将样式添加到 HTML 元素，或者间接地在独立的样式表中（CSS 文件）进行定义。</p></blockquote><h3 style="text-align:center;color:green;font-size:30px;font-family:华文楷体">HTML 样式实例 - 背景颜色</h3><blockquote><p>background-color 属性为元素定义了背景颜色：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=&quot;background-color:yellow&quot;&gt;</span><br><span class="line">&lt;h2 style=&quot;background-color:red&quot;&gt;This is a heading&lt;/h2&gt;</span><br><span class="line">&lt;p style=&quot;background-color:green&quot;&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 style="text-align:center;color:red;font-size:30px;font-family:华文楷体">HTML 样式实例 - 字体、颜色和尺寸</h4><blockquote><p>font-family、color 以及 font-size 属性分别定义元素中文本的字体系列、颜色和字体尺寸：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 style=&quot;font-family:verdana&quot;&gt;A heading&lt;/h1&gt;</span><br><span class="line">&lt;p style=&quot;font-family:arial;color:red;font-size:20px;&quot;&gt;A paragraph.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 style="text-align:center;color:green;font-size:30px;font-family:华文楷体">HTML 样式实例 - 文本对齐</h5>                    <blockquote><p>text-align 属性规定了元素中文本的水平对齐方式：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 style=&quot;text-align:center&quot;&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The heading above is aligned to the center of this page.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 style="text-align:center;font-size:60px;">HTML 文本格式化</h1><blockquote><p>HTML 可定义很多供格式化输出的元素，比如粗体和斜体字。</p></blockquote><h2 style="text-align:center;font-size:30px;font-family:华文楷体;color:red">文本风格化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;b&gt;This text is bold&lt;/b&gt;</span><br><span class="line"></span><br><span class="line">&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;This text is strong&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">&lt;big&gt;This text is big&lt;/big&gt;</span><br><span class="line"></span><br><span class="line">&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">&lt;em&gt;This text is emphasized&lt;/em&gt;</span><br><span class="line"></span><br><span class="line">&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">&lt;i&gt;This text is italic&lt;/i&gt;</span><br><span class="line"></span><br><span class="line">&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">&lt;small&gt;This text is small&lt;/small&gt;</span><br><span class="line"></span><br><span class="line">&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">This text contains</span><br><span class="line">&lt;sub&gt;subscript&lt;/sub&gt;</span><br><span class="line"></span><br><span class="line">&lt;br /&gt;</span><br></pre></td></tr></table></figure><h3 style="text-align:center;font-size:30px;color:red;font-family:华文楷体">预格式文本</h3>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    &lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;</span><br><span class="line">这是</span><br><span class="line">预格式文本。</span><br><span class="line">它保留了      空格</span><br><span class="line">和换行。</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;pre 标签很适合显示计算机代码：&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;</span><br><span class="line">for i = 1 to 10</span><br><span class="line">     print i</span><br><span class="line">next i</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 style="text-align:center;font-size:30px;color:red;font-family:华文楷体">“计算机输出”标签</h4>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;code&gt;Computer code&lt;/code&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;kbd&gt;Keyboard input&lt;/kbd&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;tt&gt;Teletype text&lt;/tt&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;samp&gt;Sample text&lt;/samp&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;var&gt;Computer variable&lt;/var&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;b&gt;注释：&lt;/b&gt;这些标签常用于显示计算机/编程代码。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 style="text-align:center;font-size:30px;color:red;font-family:华文楷体">地址</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;address&gt;</span><br><span class="line">Written by &lt;a href=&quot;mailto:webmaster@example.com&quot;&gt;Donald Duck&lt;/a&gt;.&lt;br&gt; </span><br><span class="line">Visit us at:&lt;br&gt;</span><br><span class="line">Example.com&lt;br&gt;</span><br><span class="line">Box 564, Disneyland&lt;br&gt;</span><br><span class="line">USA</span><br><span class="line">&lt;/address&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 style="text-align:center;font-size:30px;color:red;font-family:华文楷体">缩写和首字母缩写</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTML &lt;abbr&gt; 元素定义缩写或首字母缩略语。</span><br><span class="line"></span><br><span class="line">对缩写进行标记能够为浏览器、翻译系统以及搜索引擎提供有用的信息。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;abbr title=&quot;etcetera&quot;&gt;etc.&lt;/abbr&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;acronym title=&quot;World Wide Web&quot;&gt;WWW&lt;/acronym&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;在某些浏览器中，当您把鼠标移至缩略词语上时，title 可用于展示表达的完整版本。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;仅对于 IE 5 中的 acronym 元素有效。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;对于 Netscape 6.2 中的 abbr 和 acronym 元素都有效。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 style="text-align:center;font-size:30px;color:red;font-family:华文楷体">文字方向</h6><blockquote><p>bdo:dir&#x3D;ltr（从左到右输出）,rtl（从右到左输出）必需。规定 <bdo> 元素内文本的文本方向。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">如果您的浏览器支持 bi-directional override (bdo)，下一行会从右向左输出 (rtl)；</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;bdo dir=&quot;rtl&quot;&gt;</span><br><span class="line">Here is some Hebrew text</span><br><span class="line">&lt;/bdo&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 style="text-align:center;font-size:30px;color:red;font-family:华文楷体">快引用</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTML &lt;blockquote&gt; 元素定义被引用的节。</span><br><span class="line">浏览器通常会对 &lt;blockquote&gt; 元素进行缩进处理。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">这是长的引用：</span><br><span class="line">&lt;blockquote&gt;</span><br><span class="line">这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。</span><br><span class="line">&lt;/blockquote&gt;</span><br><span class="line"></span><br><span class="line">这是短的引用：</span><br><span class="line">&lt;q&gt;</span><br><span class="line">这是短的引用。</span><br><span class="line">&lt;/q&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">使用 blockquote 元素的话，浏览器会插入换行和外边距，而 q 元素不会有任何特殊的呈现。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 style="text-align:center;font-size:30px;color:red;font-family:华文楷体">删除字效果和插入字效果</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;一打有 &lt;del&gt;二十&lt;/del&gt; &lt;ins&gt;十二&lt;/ins&gt; 件。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;大多数浏览器会改写为删除文本和下划线文本。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;一些老式的浏览器会把删除文本和下划线文本显示为普通文本。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML基础 </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio Code </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识HTML，HTML基本使用</title>
      <link href="/2024/12/23/html/%E8%AE%A4%E8%AF%86html/"/>
      <url>/2024/12/23/html/%E8%AE%A4%E8%AF%86html/</url>
      
        <content type="html"><![CDATA[<h1 id="入门HTML"><a href="#入门HTML" class="headerlink" title="入门HTML"></a>入门HTML</h1><h2 id="在VSCode创建HTML文件"><a href="#在VSCode创建HTML文件" class="headerlink" title="在VSCode创建HTML文件"></a>在VSCode创建HTML文件</h2><h3 id="打开-VSCode："><a href="#打开-VSCode：" class="headerlink" title="打开 VSCode："></a>打开 VSCode：</h3><blockquote><p>如果你还没有打开 VSCode，首先启动它。</p></blockquote><h3 id="创建新文件："><a href="#创建新文件：" class="headerlink" title="创建新文件："></a>创建新文件：</h3><blockquote><p>你可以通过点击界面左上角的“文件”菜单，然后选择“新建文件”来创建一个新文件。<br>或者，你可以使用快捷键 Ctrl + N（在 Windows&#x2F;Linux 上）或 Cmd + N（在 macOS 上）来快速创建一个新文件。</p></blockquote><h3 id="保存文件为-HTML："><a href="#保存文件为-HTML：" class="headerlink" title="保存文件为 HTML："></a>保存文件为 HTML：</h3><blockquote><p>在创建新文件后，你需要保存它。点击界面左上角的“文件”菜单，然后选择“保存”或者使用快捷键 Ctrl + S（在 Windows&#x2F;Linux 上）或 Cmd + S（在 macOS 上）。<br>在弹出的保存对话框中，选择你想要保存文件的位置，然后在文件名输入框中输入文件名，确保文件名以 .html 结尾（例如，example.html）。</p></blockquote><h3 id="开始编写-HTML："><a href="#开始编写-HTML：" class="headerlink" title="开始编写 HTML："></a>开始编写 HTML：</h3><blockquote><p>一旦文件被保存为 HTML 文件，你就可以开始编写 HTML 代码了。例如，一个基本的 HTML 页面结构如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-HTML-模板："><a href="#使用-HTML-模板：" class="headerlink" title="使用 HTML 模板："></a>使用 HTML 模板：</h3><blockquote><p>VSCode 支持通过快捷方式创建文件模板。你可以安装一个名为 “HTML Snippets” 的扩展来快速生成 HTML 文件的基本结构。</p></blockquote><h3 id="保存并预览："><a href="#保存并预览：" class="headerlink" title="保存并预览："></a>保存并预览：</h3><blockquote><p>编写完 HTML 代码后，保存文件。你可以通过右键点击编辑器中的文件并选择“在浏览器中打开”来预览你的 HTML 页面，或者直接使用浏览器打开保存的 HTML 文件。</p></blockquote><h1 id="HTML基础标签"><a href="#HTML基础标签" class="headerlink" title="HTML基础标签"></a>HTML基础标签</h1><p><img src="/img%5Cyouxin%5Chtmljc.png"></p><h1 id="HTML基础属性"><a href="#HTML基础属性" class="headerlink" title="HTML基础属性"></a>HTML基础属性</h1><p><img src="/img%5Cyouxin%5Chtmlsx.png"></p>]]></content>
      
      
      <categories>
          
          <category> HTML基础 </category>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio Code </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp什么是委托</title>
      <link href="/2024/12/14/csharp%E5%A7%94%E6%89%98/"/>
      <url>/2024/12/14/csharp%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp什么是委托"><a href="#Csharp什么是委托" class="headerlink" title="Csharp什么是委托"></a>Csharp什么是委托</h1><p>1.在C#中，委托（Delegate）是一种特殊的类型，它定义了方法的类型，使得可以将方法作为参数传递，或者将其赋值给变量。委托是实现事件和回调方法的基础。它们使得将方法作为对象进行操作成为可能，这在异步编程、事件处理和回调方法中非常有用。</p><p>2.委托的基本语法</p><blockquote><p>委托的定义类似于接口，但它专门用于方法。下面是一个委托的基本定义：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">Operation</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>这个Operation委托类型可以持有任何接受两个int参数并返回一个int的方法。</p></blockquote><p>3.使用委托</p><blockquote><p>定义委托：首先定义一个委托类型。<br>实例化委托：创建委托的实例，并将其与具体的方法关联。<br>调用委托：通过委托实例调用方法。</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">Operation</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现委托的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MathOperations</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Subtract</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x - y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MathOperations math = <span class="keyword">new</span> MathOperations();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化委托</span></span><br><span class="line">        Operation op = <span class="keyword">new</span> Operation(math.Add);</span><br><span class="line">        <span class="built_in">int</span> result = op(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">// 调用委托，等同于math.Add(5, 3)</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Add: &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变委托关联的方法</span></span><br><span class="line">        op = math.Subtract;</span><br><span class="line">        result = op(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">// 调用委托，等同于math.Subtract(5, 3)</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Subtract: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.多播委托</p><blockquote><p>C#中的委托还支持多播，即一个委托可以关联多个方法。当委托被调用时，关联的所有方法都会按顺序被调用。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">HelloDelegate</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Greeting</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Hello</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Goodbye</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Goodbye, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        HelloDelegate hello = <span class="keyword">new</span> HelloDelegate(<span class="keyword">new</span> Greeting().Hello);</span><br><span class="line">        hello += <span class="keyword">new</span> Greeting().Goodbye; <span class="comment">// 添加另一个方法</span></span><br><span class="line"></span><br><span class="line">        hello(<span class="string">&quot;World&quot;</span>); <span class="comment">// 输出: Hello, World 和 Goodbye, World</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.委托与事件</p><blockquote><p>委托是实现事件的基础。在C#中，事件是一种特殊的多播委托，用于发布订阅模式，允许对象通知其他对象发生了某个事件。</p></blockquote><p>6.总结</p><blockquote><p>委托提供了一种将方法作为参数传递的强大机制，它们是实现回调、事件和异步编程的关键。通过委托，你可以编写更加灵活和动态的代码。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp枚举类型学习笔记</title>
      <link href="/2024/12/14/csharp%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2024/12/14/csharp%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp枚举类型"><a href="#Csharp枚举类型" class="headerlink" title="Csharp枚举类型"></a>Csharp枚举类型</h1><p>1.C# 中的枚举（Enum）是一种特殊的值类型，它允许你为一组相关的常量定义一个名称。枚举是一种强类型的常量集合，这意味着每个枚举成员都有一个名称和一个底层的整数值。默认情况下，第一个枚举成员的值是0，每个随后的成员的值比前一个成员的值大1。</p><p>2.下面是枚举的一些基本用法：</p><blockquote><p>定义枚举</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> DaysOfWeek</span><br><span class="line">&#123;</span><br><span class="line">    Sunday,</span><br><span class="line">    Monday,</span><br><span class="line">    Tuesday,</span><br><span class="line">    Wednesday,</span><br><span class="line">    Thursday,</span><br><span class="line">    Friday,</span><br><span class="line">    Saturday</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用枚举</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DaysOfWeek today = DaysOfWeek.Friday;</span><br><span class="line">Console.WriteLine(today); <span class="comment">// 输出：Friday</span></span><br></pre></td></tr></table></figure><blockquote><p>访问枚举成员的值</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> dayValue = (<span class="built_in">int</span>)today;</span><br><span class="line">Console.WriteLine(dayValue); <span class="comment">// 输出：4</span></span><br></pre></td></tr></table></figure><blockquote><p>枚举的底层类型<br>你可以指定枚举的底层类型，比如 byte、sbyte、short、ushort、int、uint、long 或 ulong。如果不指定，默认是 int。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> DaysOfWeek : <span class="built_in">byte</span></span><br><span class="line">&#123;</span><br><span class="line">    Sunday,</span><br><span class="line">    Monday,</span><br><span class="line">    Tuesday,</span><br><span class="line">    Wednesday,</span><br><span class="line">    Thursday,</span><br><span class="line">    Friday,</span><br><span class="line">    Saturday</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>枚举成员的显式值<br>你也可以为枚举成员指定显式的值。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> DaysOfWeek</span><br><span class="line">&#123;</span><br><span class="line">    Sunday = <span class="number">1</span>,</span><br><span class="line">    Monday = <span class="number">2</span>,</span><br><span class="line">    Tuesday = <span class="number">3</span>,</span><br><span class="line">    Wednesday = <span class="number">4</span>,</span><br><span class="line">    Thursday = <span class="number">5</span>,</span><br><span class="line">    Friday = <span class="number">6</span>,</span><br><span class="line">    Saturday = <span class="number">7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>枚举与switch语句<br>枚举类型经常与 switch 语句一起使用。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (today)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> DaysOfWeek.Sunday:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Sunday is the first day of the week.&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DaysOfWeek.Monday:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Monday is the second day of the week.&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// ... 其他情况</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>检查枚举成员是否存在<br>你可以使用 Enum.IsDefined 方法来检查一个值是否是枚举中的一个有效成员。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isDefined = Enum.IsDefined(<span class="keyword">typeof</span>(DaysOfWeek), <span class="number">8</span>);</span><br><span class="line">Console.WriteLine(isDefined); <span class="comment">// 输出：False</span></span><br></pre></td></tr></table></figure><blockquote><p>枚举是C#中一个非常有用的功能，它可以让你的代码更加清晰和易于维护。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp结构体介绍及使用学习笔记</title>
      <link href="/2024/12/14/csharp%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2024/12/14/csharp%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp结构体介绍"><a href="#Csharp结构体介绍" class="headerlink" title="Csharp结构体介绍"></a>Csharp结构体介绍</h1><p>1.在C#中，结构体是一种值类型，用于封装少量的数据。结构体使用 struct 关键字定义，并且可以包含数据字段、方法、属性、索引器、运算符重载和构造函数。结构体不能继承其他的结构体或类，也不能被其他结构体或类继承。以下是结构体的一些基本特性：</p><p>2.定义结构体：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Point</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.实例化结构体：</p><blockquote><p>结构体可以通过直接声明或使用 new 关键字来实例化。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Point p1 = <span class="keyword">new</span> Point();</span><br><span class="line">Point p2 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>4.结构体是值类型：</p><blockquote><p>结构体是值类型，所以当它们被赋值给另一个变量时，它们的值会被复制。</p></blockquote><p>5.方法和属性：</p><blockquote><p>结构体可以包含方法和属性，就像类一样。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Rectangle</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Length;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Area</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> Length * Width; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintArea</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Area: <span class="subst">&#123;Area&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.运算符重载：</p><blockquote><p>结构体可以重载运算符，以提供自定义的操作。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Vector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> X;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector <span class="keyword">operator</span> +(Vector a, Vector b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector(a.X + b.X, a.Y + b.Y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.结构体与类的区别：</p><blockquote><p>结构体是值类型，而类是引用类型。<br>结构体默认继承自 System.ValueType，而类默认继承自 System.Object。<br>结构体不能有析构函数，而类可以。<br>结构体不能实现接口，而类可以。</p></blockquote><p>8.装箱和拆箱：</p><blockquote><p>当结构体被赋值给一个对象类型（比如 object 或接口类型）时，会发生装箱操作，将值类型转换为引用类型。相反的操作称为拆箱。</p></blockquote><blockquote><p>使用结构体时，通常是为了创建轻量级的、不可变的数据结构，或者当你需要确保数据被复制而不是引用时。</p></blockquote><h1 id="Csharp结构体函数"><a href="#Csharp结构体函数" class="headerlink" title="Csharp结构体函数"></a>Csharp结构体函数</h1><p>1.在C#中，结构体（struct）是一种值类型，它可以用来定义轻量级的数据结构。结构体可以包含数据字段、属性、方法和构造函数等。以下是一些关于C#结构体中函数的基本示例：</p><p>2.结构体定义</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Point</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintCoordinates</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;(<span class="subst">&#123;X&#125;</span>, <span class="subst">&#123;Y&#125;</span>)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写ToString方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;Point(<span class="subst">&#123;X&#125;</span>, <span class="subst">&#123;Y&#125;</span>)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用结构体</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Point p = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">p.PrintCoordinates(); <span class="comment">// 输出: (10, 20)</span></span><br><span class="line">Console.WriteLine(p.ToString()); <span class="comment">// 输出: Point(10, 20)</span></span><br></pre></td></tr></table></figure><p>4.结构体与方法</p><blockquote><p>构造函数：用于初始化结构体的字段。<br>方法：可以定义方法来执行特定的操作，比如上面的PrintCoordinates方法。<br>属性：使用get和set块来定义属性，允许外部代码以属性的方式访问结构体的字段。<br>重写方法：可以重写如ToString等方法，以提供结构体的自定义字符串表示。</p></blockquote><p>5.结构体的值类型特性</p><blockquote><p>结构体是值类型，赋值和参数传递时会复制整个结构体。<br>结构体不能被继承，但可以实现接口。<br>结构体默认有Equals、GetHashCode和ToString方法，但通常需要根据需要重写这些方法。</p></blockquote><p>6.结构体与类的区别</p><blockquote><p>类是引用类型，而结构体是值类型。<br>类可以继承其他类，而结构体不能继承其他结构体或类。<br>结构体的字段默认为private，而类的字段默认为private。</p></blockquote><blockquote><p>这些是C#中结构体和函数的基本用法。根据具体需求，你可以在结构体中定义更多复杂的逻辑和方法。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp递归的调用、常量学习笔记</title>
      <link href="/2024/12/13/csharp%E9%80%92%E5%BD%92%E3%80%81%E5%B8%B8%E9%87%8F/"/>
      <url>/2024/12/13/csharp%E9%80%92%E5%BD%92%E3%80%81%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp递归函数练习"><a href="#Csharp递归函数练习" class="headerlink" title="Csharp递归函数练习"></a>Csharp递归函数练习</h1><h3 id="1-2！-3！-···-10！"><a href="#1-2！-3！-···-10！" class="headerlink" title="1+2！+3！+···+10！"></a>1+2！+3！+···+10！</h3><p>利用多少个方法计算结果</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">F1</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> result = n * F1(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">F2</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> result = F2(n - <span class="number">1</span>) + F1(n);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(F2(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 输出结果：<br> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4037913</span></span><br></pre></td></tr></table></figure></p><h1 id="有关系式1-1-2-2-3-3-···-K-K"><a href="#有关系式1-1-2-2-3-3-···-K-K" class="headerlink" title="有关系式1^1+2^2+3^3+···+K^K&lt;2000,编一个程序，求出满足此关系式的最大值"></a>有关系式1^1+2^2+3^3+···+K^K&lt;2000,编一个程序，求出满足此关系式的最大值</h1><blockquote><p>利用递归和循环解决这个问题</p></blockquote><p>1.循环：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result += k * k;</span><br><span class="line">        <span class="keyword">if</span> (result &gt;= <span class="number">2000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(k - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure><p>2.递归：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">F</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> result = F(n - <span class="number">1</span>) + n * n;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(F(i) &gt;= <span class="number">2000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 输出结果：<br> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure></p><h1 id="什么是常量"><a href="#什么是常量" class="headerlink" title="什么是常量"></a>什么是常量</h1><ol><li>在C#中，常量是一种特殊的变量，其值在初始化后不能被改变。常量用于存储那些在程序运行期间不应该改变的数据。</li><li>以下是C#中常量的几个关键点：</li></ol><blockquote><p>声明：使用const关键字来声明常量。<br>类型：常量必须有明确的类型，通常是基本数据类型，如int、double、string等。<br>初始化：常量在声明时必须被初始化，且之后不能被重新赋值。<br>作用域：常量的作用域取决于其声明的位置，可以是局部的（在方法或代码块中）或全局的（在类或命名空间中）。<br>编译时常数：编译器在编译时会将常量的值内嵌到代码中，这意味着它们在运行时是不可变的。</p></blockquote><h3 id="下面是一个C-中声明和使用常量的例子："><a href="#下面是一个C-中声明和使用常量的例子：" class="headerlink" title="下面是一个C#中声明和使用常量的例子："></a>下面是一个C#中声明和使用常量的例子：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConstantsExample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 声明一个常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> MaxValue = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用常量</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;The maximum value is: &quot;</span> + MaxValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ConstantsExample example = <span class="keyword">new</span> ConstantsExample();</span><br><span class="line">        example.Display();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试修改常量值将导致编译错误</span></span><br><span class="line">        <span class="comment">// ConstantsExample.MaxValue = 200; // 错误：无法对只读字段“ConstantsExample.MaxValue”赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，MaxValue是一个常量，它被声明为const，并且初始化为100。在Display方法中，我们使用这个常量来打印信息。尝试修改MaxValue的值将导致编译错误，因为常量在初始化后不能被改变。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp函数的重载学习笔记</title>
      <link href="/2024/12/12/csharp%E5%87%BD%E6%95%B0%E7%9A%84%E9%87%8D%E8%BD%BD/"/>
      <url>/2024/12/12/csharp%E5%87%BD%E6%95%B0%E7%9A%84%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp函数的重载-Overload"><a href="#Csharp函数的重载-Overload" class="headerlink" title="Csharp函数的重载-Overload"></a>Csharp函数的重载-Overload</h1><p>1.在C#中，函数重载（Function Overloading）是指在同一个类中可以定义多个同名函数，只要它们的参数列表不同即可。参数列表不同可以是参数的类型不同、参数的数量不同，或者是两者都不同。函数重载使得函数名可以保持一致，同时能够根据传入的参数执行不同的操作。</p><p>2.以下是函数重载的几个要点：</p><blockquote><p>1.函数名相同：重载的函数必须在同一个类中，并且函数名相同。<br>2.参数列表不同：参数列表必须在数量或者类型上有所不同。<br>3.返回类型无关：函数的返回类型不影响重载，即使两个函数返回类型不同，只要参数列表相同，它们就不是重载。<br>4.访问修饰符无关：函数的访问修饰符（如public、private等）不影响重载。</p></blockquote><p>3.下面是一个简单的C#函数重载的例子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MathOperations</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 重载函数，无参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载函数，一个int参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载函数，两个int参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载函数，一个double参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Add</span>(<span class="params"><span class="built_in">double</span> a</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，Add 函数被重载了四次，每次的参数列表都不同。这使得调用者可以根据需要传入不同数量或类型的参数，并执行相应的操作。</p></blockquote><blockquote><p>需要注意的是，C#编译器在调用函数时，会根据传入参数的类型和数量来决定调用哪个重载版本。如果存在多个匹配的重载版本，编译器将选择最具体的一个。如果没有匹配的重载版本，或者存在多个同样具体的版本，编译器将报错。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp递归的调用学习笔记</title>
      <link href="/2024/12/12/csharp%E9%80%92%E5%BD%92%E7%9A%84%E8%B0%83%E7%94%A8/"/>
      <url>/2024/12/12/csharp%E9%80%92%E5%BD%92%E7%9A%84%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp方法的递归调用"><a href="#Csharp方法的递归调用" class="headerlink" title="Csharp方法的递归调用"></a>Csharp方法的递归调用</h1><p>1.在C#中，递归调用是一种方法自己调用自己的技术。递归可以用来解决那些可以分解成相似子问题的问题，比如树的遍历、排序算法（如快速排序、归并排序）等。递归方法通常有两个主要部分：递归终止条件和递归工作部分。</p><p>2.下面是一个简单的递归方法的例子，这个方法用来计算一个数的阶乘：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> number = <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">int</span> result = Factorial(number);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;The factorial of &quot;</span> + number + <span class="string">&quot; is &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Factorial</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归工作部分</span></span><br><span class="line">        <span class="keyword">return</span> n * Factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在这个例子中，Factorial 方法计算一个整数 n 的阶乘。递归终止条件是当 n 小于或等于1时，因为1的阶乘是1，这是计算的基本情况。递归工作部分是方法调用自己，但是每次都将 n 减少1，直到达到基本情况。</p><p>4.使用递归时需要注意以下几点：</p><blockquote><p>递归终止条件：必须有一个明确的终止条件来防止无限递归。<br>递归工作部分：每次递归调用都应该向终止条件靠近。<br>性能问题：递归可能会导致较大的内存开销，因为每次递归调用都会在调用栈上增加一层。对于深度递归，可能会导致栈溢出错误。<br>尾递归优化：在某些编程语言中，尾递归可以被优化以减少内存使用。但在C#中，编译器并不自动优化尾递归。<br>在实际编程中，递归是一种强大的工具，但需要谨慎使用，以避免性能问题和栈溢出错误。对于可以递归解决的问题，有时候使用迭代方法（循环）可能是一个更好的选择。</p></blockquote><h1 id="递归函数—求阶乘"><a href="#递归函数—求阶乘" class="headerlink" title="递归函数—求阶乘"></a>递归函数—求阶乘</h1><h2 id="1-10的阶乘"><a href="#1-10的阶乘" class="headerlink" title="1.10的阶乘"></a>1.10的阶乘</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">F</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> result=n * F(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(F(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp方法的参数和返回值学习笔记</title>
      <link href="/2024/12/10/csharp%E5%8F%82%E6%95%B0/"/>
      <url>/2024/12/10/csharp%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp方法的参数和返回值学习笔记"><a href="#Csharp方法的参数和返回值学习笔记" class="headerlink" title="Csharp方法的参数和返回值学习笔记"></a>Csharp方法的参数和返回值学习笔记</h1><p><font size='5'>1.在C#中，方法（Method）是类或结构体中定义的，用来执行特定任务的代码块。方法可以有参数（Parameter），也可以有返回值（Return Value）。下面分别介绍方法的参数和返回值：</font></p><h3 id="方法的参数（Parameter）"><a href="#方法的参数（Parameter）" class="headerlink" title="方法的参数（Parameter）"></a>方法的参数（Parameter）</h3><p>1.参数是传递给方法的值，用于控制方法的行为。参数定义在方法的声明中，位于方法名之后，括号()内部，参数之间用逗号分隔。</p><blockquote><p>位置参数：调用方法时，参数值按照定义的顺序传递。<br>命名参数：在调用方法时，可以指定参数名，使得代码更清晰。<br>可选参数：使用optional关键字定义，调用时可以省略。<br>参数数组：使用params关键字定义，允许传递不定数量的参数。<br>输出参数：使用out关键字定义，方法可以返回多个值。</p></blockquote><h3 id="方法的返回值（Return-Value）"><a href="#方法的返回值（Return-Value）" class="headerlink" title="方法的返回值（Return Value）"></a>方法的返回值（Return Value）</h3><p>1.返回值是方法执行完毕后返回给调用者的值。返回值的类型在方法声明中指定。</p><blockquote><p>返回类型：方法声明时指定的类型，如int、string等。<br>返回语句：使用return关键字，后面跟返回值。<br>无返回值：使用void关键字，表示方法不返回任何值。<br>隐式返回值：对于void方法，不需要return语句，方法执行完毕后自动返回。</p></blockquote><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 带参数和返回值的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b; <span class="comment">// 返回值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带可选参数的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">string</span> message = <span class="string">&quot;Hello&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数数组的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] names</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> names)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带输出参数的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Calculate</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> result</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="number">42</span>; <span class="comment">// 输出参数赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，Add方法接受两个整数参数并返回它们的和；Display方法有一个可选参数；Print方法接受一个参数数组；Calculate方法有一个输出参数。</p><h1 id="Csharp方法中的参数数组学习笔记"><a href="#Csharp方法中的参数数组学习笔记" class="headerlink" title="Csharp方法中的参数数组学习笔记"></a>Csharp方法中的参数数组学习笔记</h1><p>1.在C#中，参数数组是一种特殊的数组，它允许你传递一个不定数量的参数给方法。参数数组使用params关键字来声明，它只能作为方法的最后一个参数，并且只能声明一次。</p><p>2.以下是使用参数数组的一些基本规则：</p><blockquote><p>使用params关键字：在方法的参数列表中，使用params关键字来声明参数数组。<br>类型限制：参数数组必须是方法的最后一个参数，并且只能有一个。<br>传递参数：你可以像传递普通数组一样传递参数数组，也可以传递单个参数，编译器会自动将它们包装成数组。</p></blockquote><h3 id="下面是一个使用参数数组的简单示例："><a href="#下面是一个使用参数数组的简单示例：" class="headerlink" title="下面是一个使用参数数组的简单示例："></a>下面是一个使用参数数组的简单示例：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        PrintSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 传递多个参数</span></span><br><span class="line">        PrintSum(<span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;); <span class="comment">// 传递数组</span></span><br><span class="line">        PrintSum(<span class="number">1</span>); <span class="comment">// 传递单个参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintSum</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] numbers</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> number <span class="keyword">in</span> numbers)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += number;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Sum: <span class="subst">&#123;sum&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，PrintSum方法可以接受任意数量的整数参数。你可以传递单个整数、一个整数数组，或者多个整数作为参数。</p><p>参数数组在内部实际上是一个数组，所以你可以像使用普通数组一样使用它，例如通过索引访问元素、使用Length属性获取元素数量等。</p>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp函数定义和调用学习笔记学习笔记</title>
      <link href="/2024/12/08/csharp%E5%87%BD%E6%95%B0%E4%B8%80/"/>
      <url>/2024/12/08/csharp%E5%87%BD%E6%95%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp函数定义和调用学习笔记"><a href="#Csharp函数定义和调用学习笔记" class="headerlink" title="Csharp函数定义和调用学习笔记"></a>Csharp函数定义和调用学习笔记</h1><h3 id="在C-中，函数通常被称为方法（Method）。方法是一种执行特定任务的代码块，可以包含参数（输入值），并可以返回结果。以下是C-中方法的定义和调用的基本步骤："><a href="#在C-中，函数通常被称为方法（Method）。方法是一种执行特定任务的代码块，可以包含参数（输入值），并可以返回结果。以下是C-中方法的定义和调用的基本步骤：" class="headerlink" title="在C#中，函数通常被称为方法（Method）。方法是一种执行特定任务的代码块，可以包含参数（输入值），并可以返回结果。以下是C#中方法的定义和调用的基本步骤："></a>在C#中，函数通常被称为方法（Method）。方法是一种执行特定任务的代码块，可以包含参数（输入值），并可以返回结果。以下是C#中方法的定义和调用的基本步骤：</h3><p>1.方法的定义</p><blockquote><p>访问修饰符：定义方法的可见性（如public, private, protected等）。<br>返回类型：方法执行完毕后返回的数据类型。<br>方法名称：方法的名称，遵循C#的命名规则。<br>参数列表：方法需要的输入值，包括类型和名称，由圆括号包围。<br>方法体：包含方法逻辑的代码块，由大括号 {} 包围。</p></blockquote><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义一个方法，没有参数，返回一个字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SayHello</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法，有两个参数，返回一个整数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">AddNumbers</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.方法的调用</p><blockquote><p>要调用一个方法，你需要使用方法的名称，后面跟着一对圆括号，如果方法有参数，则在圆括号内传递相应的参数值。</p></blockquote><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyClass myClass = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用没有参数的方法</span></span><br><span class="line">        <span class="built_in">string</span> helloMessage = myClass.SayHello();</span><br><span class="line">        Console.WriteLine(helloMessage); <span class="comment">// 输出: Hello, World!</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用有参数的方法</span></span><br><span class="line">        <span class="built_in">int</span> result = myClass.AddNumbers(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        Console.WriteLine(result); <span class="comment">// 输出: 8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.静态方法</p><blockquote><p>静态方法不依赖于类的实例，可以直接通过类名来调用。</p></blockquote><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Utility</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义一个静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetGreeting</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Good morning!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 直接通过类名调用静态方法</span></span><br><span class="line">        <span class="built_in">string</span> greeting = Utility.GetGreeting();</span><br><span class="line">        Console.WriteLine(greeting); <span class="comment">// 输出: Good morning!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.重载方法</p><blockquote><p>你可以在同一个类中定义多个同名方法，只要它们的参数列表不同（参数的类型和&#x2F;或数量不同）。</p></blockquote><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 方法重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Calculate</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Calculate</span>(<span class="params"><span class="built_in">double</span> a, <span class="built_in">double</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Calculator calc = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> intResult = calc.Calculate(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        Console.WriteLine(intResult); <span class="comment">// 输出: 3</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">double</span> doubleResult = calc.Calculate(<span class="number">1.5</span>, <span class="number">2.5</span>);</span><br><span class="line">        Console.WriteLine(doubleResult); <span class="comment">// 输出: 4.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上述示例中，Calculate 方法被重载了两次，一次接受两个整数参数，另一次接受两个双精度浮点数参数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp字符串遍历编程题三学习笔记</title>
      <link href="/2024/12/05/csharp%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%81%8D%E5%8E%86%E7%BC%96%E7%A8%8B%E9%A2%983/"/>
      <url>/2024/12/05/csharp%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%81%8D%E5%8E%86%E7%BC%96%E7%A8%8B%E9%A2%983/</url>
      
        <content type="html"><![CDATA[<h1 id="输入是个不相等的正整数，输出这10个正整数中的第二大的数。"><a href="#输入是个不相等的正整数，输出这10个正整数中的第二大的数。" class="headerlink" title="输入是个不相等的正整数，输出这10个正整数中的第二大的数。"></a>输入是个不相等的正整数，输出这10个正整数中的第二大的数。</h1><p>样例输入<br>3 5 7 2 9 5 3 10 3 8<br>样例输出<br>9</p><p>分析：</p><blockquote><p>定义两个变量设置为第一大数，和第二大数</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str=Console.ReadLine();</span><br><span class="line">    <span class="built_in">string</span>[] strArray = str.Split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">int</span>[] intArray = <span class="keyword">new</span> <span class="built_in">int</span>[strArray.Length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; intArray.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> number=Convert.ToInt32(strArray[i]);</span><br><span class="line">        intArray[i] = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> max1 = <span class="number">0</span>, max2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; intArray.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (intArray[i] &gt; max1)</span><br><span class="line">        &#123;</span><br><span class="line">            max2 = max1;</span><br><span class="line">            max1=intArray[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(intArray[i] &gt; max2)</span><br><span class="line">            &#123;</span><br><span class="line">                max2 = intArray[i];</span><br><span class="line">            &#125;                        </span><br><span class="line">        &#125;                              </span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;第一大数&quot;</span> + max1 + <span class="string">&quot;第二大数&quot;</span> + max2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">4</span> <span class="number">9</span> <span class="number">7</span> <span class="number">10</span></span><br><span class="line">第一大数<span class="number">10</span>第二大数<span class="number">9</span></span><br></pre></td></tr></table></figure><h1 id="描述给定一个只包含小写字母的字符串，请你找出第一个仅出现一次的字符。如果没有，输出no。"><a href="#描述给定一个只包含小写字母的字符串，请你找出第一个仅出现一次的字符。如果没有，输出no。" class="headerlink" title="描述给定一个只包含小写字母的字符串，请你找出第一个仅出现一次的字符。如果没有，输出no。"></a>描述给定一个只包含小写字母的字符串，请你找出第一个仅出现一次的字符。如果没有，输出no。</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str=Console.ReadLine();</span><br><span class="line">    <span class="built_in">int</span>[] countArray= <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;str.Length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        countArray[str[i]-<span class="string">&#x27;a&#x27;</span>]=countArray[str[i]-<span class="string">&#x27;a&#x27;</span>]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bool</span> isFind = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">char</span> c = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;str.Length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (countArray[str[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            isFind = <span class="literal">true</span>;</span><br><span class="line">            c = str[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isFind == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果：-1"><a href="#输出结果：-1" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">levvel</span><br><span class="line">no</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">level</span><br><span class="line">v</span><br></pre></td></tr></table></figure><h1 id="大小写字母转换"><a href="#大小写字母转换" class="headerlink" title="大小写字母转换"></a>大小写字母转换</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str=Console.ReadLine();</span><br><span class="line">    <span class="built_in">int</span> cha = <span class="string">&#x27;A&#x27;</span> - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">char</span> c = (<span class="built_in">char</span>)(str[i] + cha);</span><br><span class="line">            Console.Write(c);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; cha &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">char</span> c = (<span class="built_in">char</span>)(str[i] - cha);</span><br><span class="line">            Console.Write(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果：-2"><a href="#输出结果：-2" class="headerlink" title="输出结果："></a>输出结果：</h3> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fjsdjfFLKSJ</span><br><span class="line">FJSDJFflksj</span><br></pre></td></tr></table></figure><h1 id="在一个数组中查找一个给定的值，输出第一次出现的位置-从一开始）"><a href="#在一个数组中查找一个给定的值，输出第一次出现的位置-从一开始）" class="headerlink" title="在一个数组中查找一个给定的值，输出第一次出现的位置(从一开始）"></a>在一个数组中查找一个给定的值，输出第一次出现的位置(从一开始）</h1><blockquote><p>输入：3 8 23 45 2 5<br> 23<br> 输出：3</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str=Console.ReadLine();</span><br><span class="line">    <span class="built_in">string</span>[] strArray = str.Split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">int</span>[] intArray = <span class="keyword">new</span> <span class="built_in">int</span>[strArray.Length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; intArray.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> n=Convert.ToInt32(strArray[i]);</span><br><span class="line">        intArray[i] = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> number=Convert.ToInt32(Console.ReadLine());</span><br><span class="line">    <span class="built_in">int</span> location = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt; intArray.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (number == intArray[i])</span><br><span class="line">        &#123;</span><br><span class="line">            location = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(location);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果：-3"><a href="#输出结果：-3" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">76</span> <span class="number">3</span> <span class="number">67</span></span><br><span class="line"><span class="number">76</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp字符串遍历编程题二学习笔记</title>
      <link href="/2024/12/03/csharp%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%81%8D%E5%8E%86%E7%BC%96%E7%A8%8B%E9%A2%982/"/>
      <url>/2024/12/03/csharp%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%81%8D%E5%8E%86%E7%BC%96%E7%A8%8B%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp编程题判断合法标识符。"><a href="#Csharp编程题判断合法标识符。" class="headerlink" title="Csharp编程题判断合法标识符。"></a>Csharp编程题判断合法标识符。</h1><p>1.输入一个字符串，判断其是否是c#的合法标识符。<br>2.分析：</p><blockquote><p>判断字符串是否不是是数字、字母（大小写）、下划线。<br>判断是否是数字开头（数字开头不是合法标识符）</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str=Console.ReadLine();</span><br><span class="line">    <span class="built_in">bool</span> isRight = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((str[i] &lt; <span class="string">&#x27;0&#x27;</span> || str[i]&gt;<span class="string">&#x27;9&#x27;</span>)&amp;&amp;(str[i] &lt; <span class="string">&#x27;a&#x27;</span> || str[i]&gt;<span class="string">&#x27;z&#x27;</span>)&amp;&amp; (str[i] &lt; <span class="string">&#x27;A&#x27;</span> || str[i] &gt; <span class="string">&#x27;Z&#x27;</span>) &amp;&amp; (str[i] != <span class="string">&#x27;_&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            isRight = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;str[<span class="number">0</span>]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        isRight=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRight)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;是合法字符&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;不是合法字符&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.输出结果：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHFKHFRjgjidgj12</span><br><span class="line">是合法字符</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>JHSJFjlfjsd</span><br><span class="line">不是合法字符</span><br></pre></td></tr></table></figure><h1 id="Csharp编程题-回文串。"><a href="#Csharp编程题-回文串。" class="headerlink" title="Csharp编程题-回文串。"></a>Csharp编程题-回文串。</h1><p>1.“回文串”是一个正读和反读都一样的字符串，比如“level”或者“noon”等等就是回文串。请写一个程序判断读入的字符串是否是“回文”。<br>2.分析：</p><blockquote><p>如果字符串是偶数的话，假如8&#x2F;2&#x3D;4，遍历0-3。如果是奇数的话，7&#x2F;2&#x3D;3，遍历0-2<br>假设字符串是8，那么索引对应的是0-7、1-6、2-5···，i对应的倒数length-1-i。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str = Console.ReadLine();</span><br><span class="line">    <span class="built_in">bool</span> ha = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str.Length / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != str[str.Length - <span class="number">1</span> - i])</span><br><span class="line">        &#123;</span><br><span class="line">            ha = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ha)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;是回文串&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;不是回文串&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 3.输出结果：<br> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> level</span><br><span class="line">是回文串</span><br></pre></td></tr></table></figure></p><h1 id="Csharp编程题-查找最长连续次数"><a href="#Csharp编程题-查找最长连续次数" class="headerlink" title="Csharp编程题-查找最长连续次数"></a>Csharp编程题-查找最长连续次数</h1><p>1.收集了连续N（1&lt;N&lt;10000000)天的最高气温数据。现在他想知道气温一直上升的最长连续天数。<br>样例输入：1 3 5 | 2 3 5 7 8 | 6 9<br>样例输出：5<br>2.分析：</p><blockquote><p>判断前面的数字是否比后面小<br>如果后面的连续最高天数比后面的连续天数高则更新一下。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str=Console.ReadLine();</span><br><span class="line">    <span class="built_in">string</span>[] strArray = str.Split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">int</span>[] ints= <span class="keyword">new</span> <span class="built_in">int</span>[strArray.Length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ints.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> number=Convert.ToInt32(strArray[i]);</span><br><span class="line">        ints[i]=number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> maxDays = <span class="number">0</span>;<span class="comment">//记录最高气温连续升高的天数</span></span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">1</span>;<span class="comment">//记录气温连续升高的天数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; ints.Length<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ints[i] &lt; ints[i + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; maxDays)</span><br><span class="line">            &#123;</span><br><span class="line">                maxDays = count;</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; maxDays)</span><br><span class="line">        &#123;</span><br><span class="line">            maxDays = count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;最高气温连续升高的最长天数&quot;</span> + maxDays);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp字符串遍历编程题学习笔记</title>
      <link href="/2024/12/01/csharp%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%81%8D%E5%8E%86%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
      <url>/2024/12/01/csharp%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%81%8D%E5%8E%86%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp字符串遍历编程题学习笔记"><a href="#Csharp字符串遍历编程题学习笔记" class="headerlink" title="Csharp字符串遍历编程题学习笔记"></a>Csharp字符串遍历编程题学习笔记</h1><p>1.输入n(n&lt;100)个数，找出其中最小的数，将它与最前面的数交换后输出这些数。</p><p>2.分析：</p><blockquote><p>1.先获取字符串（string str&#x3D;Console.ReadLine()）<br>2.字符串数组通过空格进行输入，使用string[] strArray&#x3D;str.Split(‘ ‘);<br>3.字符串转换整型,声明int[] intArray&#x3D;new int[strArray.Length];使用for循环转换赋值。<br>4.假设（索引）0最小int min&#x3D;intArray[0];那最小值和后面的索引进行比较，int一个变量进行存储最小值。<br>5.找到最小值和假设的进行位置交换，int一个临时变量进行存储（索引0），在把最小值放在（索引0）里面，然后再将临时变量放在最小值里面。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str=Console.ReadLine();</span><br><span class="line">    <span class="built_in">string</span>[] strArray = str.Split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">int</span>[] intArray= <span class="keyword">new</span> <span class="built_in">int</span>[strArray.Length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strArray.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> number=Convert.ToInt32(strArray[i]);</span><br><span class="line">        intArray[i] = number; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> min = intArray[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">int</span> minIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; intArray.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (intArray[i] &lt; min)</span><br><span class="line">        &#123;</span><br><span class="line">            min = intArray[i];</span><br><span class="line">            minIndex = i;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> temp=intArray[<span class="number">0</span>];</span><br><span class="line">    intArray[<span class="number">0</span>] = intArray[minIndex];</span><br><span class="line">    intArray[minIndex] = temp;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="built_in">int</span> t <span class="keyword">in</span> intArray)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(t+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.输出结果：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">54</span> <span class="number">56</span> <span class="number">32</span> <span class="number">42</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">54</span> <span class="number">56</span> <span class="number">32</span> <span class="number">42</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="排序-系统方法"><a href="#排序-系统方法" class="headerlink" title="排序-系统方法"></a>排序-系统方法</h2><p>1.编写一个控制台程序，要求用户输入一组数字空格间隔，，对用户输入的数字从小到大输出。</p><p>2.分析：</p><blockquote><p>可以用系统方法做出来（Array.Sort）</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str=Console.ReadLine();</span><br><span class="line">    <span class="built_in">string</span>[] strArray = str.Split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">int</span>[] intArray= <span class="keyword">new</span> <span class="built_in">int</span>[strArray.Length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; intArray.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> number=Convert.ToInt32(strArray[i]);</span><br><span class="line">        intArray[i]=number;</span><br><span class="line">    &#125;</span><br><span class="line">    Array.Sort(intArray);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="built_in">int</span> i <span class="keyword">in</span> intArray)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.输出结果：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp编程题学习笔记</title>
      <link href="/2024/11/30/csharp%E7%BC%96%E7%A8%8B%E9%A2%983/"/>
      <url>/2024/11/30/csharp%E7%BC%96%E7%A8%8B%E9%A2%983/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp编程题学习笔记"><a href="#Csharp编程题学习笔记" class="headerlink" title="Csharp编程题学习笔记"></a>Csharp编程题学习笔记</h1><h2 id="1-c-三个可乐可以换一瓶可乐，现再有364瓶可乐，问一共可以和多少瓶可乐，剩下几个空瓶"><a href="#1-c-三个可乐可以换一瓶可乐，现再有364瓶可乐，问一共可以和多少瓶可乐，剩下几个空瓶" class="headerlink" title="1.c#三个可乐可以换一瓶可乐，现再有364瓶可乐，问一共可以和多少瓶可乐，剩下几个空瓶"></a>1.c#三个可乐可以换一瓶可乐，现再有364瓶可乐，问一共可以和多少瓶可乐，剩下几个空瓶</h2><p>2.分析：</p><blockquote><p>1.这个问题可以通过循环来解决，每次循环计算出可以换到的可乐瓶数和剩下的空瓶数，直到剩下的空瓶数不足以换到一瓶可乐为止。<br>2.首先，我们有364瓶可乐，每3个空瓶可以换1瓶可乐。我们可以通过以下步骤来计算：<br>•以换到的可乐瓶数：364除以3，得到121瓶可乐，余数为1个空瓶。<br>•在我们有121瓶可乐和1个空瓶，总共122个空瓶。<br>•次计算可以换到的可乐瓶数：122除以3，得到40瓶可乐，余数为2个空瓶。<br>•在我们有40瓶可乐和2个空瓶，总共42个空瓶。<br>•再次计算可以换到的可乐瓶数：42除以3，得到14瓶可乐，余数为0个空瓶。<br>•现在我们有14瓶可乐和0个空瓶，总共14个空瓶。<br>•再次计算可以换到的可乐瓶数：14除以3，得到4瓶可乐，余数为2个空瓶。<br>•现在我们有4瓶可乐和2个空瓶，总共6个空瓶。<br>•再次计算可以换到的可乐瓶数：6除以3，得到2瓶可乐，余数为0个空瓶。<br>•现在我们有2瓶可乐和0个空瓶，总共2个空瓶。<br>•再次计算可以换到的可乐瓶数：2除以3，得到0瓶可乐，余数为2个空瓶。<br>•所以，总共可以换到的可乐瓶数为：121 + 40 + 14 + 4 + 2 &#x3D; 181瓶，最后剩下2个空瓶。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> pingNumber = <span class="number">364</span>;</span><br><span class="line">    <span class="built_in">int</span> heNumber = <span class="number">364</span>;</span><br><span class="line">    <span class="keyword">while</span> (pingNumber &gt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        heNumber += pingNumber / <span class="number">3</span>;</span><br><span class="line">        pingNumber = (pingNumber / <span class="number">3</span>) + (pingNumber % <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;一共可以喝&quot;</span>+heNumber+<span class="string">&quot;,剩下&quot;</span>+pingNumber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.输出结果：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一共可以喝<span class="number">545</span>,剩下<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="编写一个应用程序来输入的字符串进行加密，对于字母字符串加密规则如下："><a href="#编写一个应用程序来输入的字符串进行加密，对于字母字符串加密规则如下：" class="headerlink" title="编写一个应用程序来输入的字符串进行加密，对于字母字符串加密规则如下："></a>编写一个应用程序来输入的字符串进行加密，对于字母字符串加密规则如下：</h2><p>‘a’→’d’,’x’→’a’,’A’→’D’,’X’→’A’,<br>1.分析：</p><blockquote><p>字符是循环+3。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str=Console.ReadLine();</span><br><span class="line">    <span class="built_in">char</span>[] strArray= str.ToCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strArray.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((strArray[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; strArray[i] &lt;= <span class="string">&#x27;z&#x27;</span>) || (strArray[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; strArray[i] &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            strArray[i] = (<span class="built_in">char</span>)(strArray[i] + <span class="number">3</span>);<span class="comment">//&#x27;a&#x27;+3 97+3=100=&#x27;d&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> (strArray[i] &gt; <span class="string">&#x27;z&#x27;</span> &amp;&amp; strArray[i] &lt;= <span class="string">&#x27;z&#x27;</span> + <span class="number">3</span>)<span class="comment">//zyx</span></span><br><span class="line">            &#123;</span><br><span class="line">                strArray[i] = (<span class="built_in">char</span>)(strArray[i] - <span class="number">26</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (strArray[i] &gt; <span class="string">&#x27;Z&#x27;</span> &amp;&amp; strArray[i] &lt;= <span class="string">&#x27;Z&#x27;</span> + <span class="number">3</span>)<span class="comment">//XYZ</span></span><br><span class="line">            &#123;</span><br><span class="line">                strArray[i]= (<span class="built_in">char</span>)(strArray[i] - <span class="number">26</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">char</span> temp <span class="keyword">in</span> strArray)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(temp+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp什么是数组，数组的遍历笔记</title>
      <link href="/2024/11/29/csharp%E6%95%B0%E7%BB%84/"/>
      <url>/2024/11/29/csharp%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h1><p>1.数组是一种常用的数据结构，用于存储同一类型的多个值。在编程中，数组可以被看作是一个容器，其中包含了固定数量的元素，这些元素通常是相同类型的数据。以下是数组的一些基本特性：</p><blockquote><p>1.元素类型一致：数组中的所有元素都是同一数据类型的，比如整数、浮点数、字符等。<br>2.连续存储：数组的元素在内存中是连续存放的，这意味着它们拥有连续的内存地址。<br>3.索引访问：可以通过索引（通常是从0开始的整数）来访问数组中的元素。例如，如果有一个名为arr的数组，那么可以通过arr[0]来访问第一个元素，arr[1]来访问第二个元素，以此类推。<br>4.固定大小：在某些编程语言中，数组的大小是固定的，一旦声明，其长度就不能改变。而在其他语言中，如Python的列表，数组的大小是动态的，可以根据需要增长和缩小。<br>5.遍历：可以遍历数组中的所有元素，通常使用循环结构（如for循环）来实现。<br>6.操作：数组支持多种操作，如查找、插入、删除、排序等。</p></blockquote><h2 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h2><blockquote><p>类型[] 数组名；<br>数组名遵守变量命名规则</p></blockquote><h2 id="数组的赋值"><a href="#数组的赋值" class="headerlink" title="数组的赋值"></a>数组的赋值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] ages=&#123;<span class="number">46</span>,<span class="number">45</span>,<span class="number">3</span>,<span class="number">53</span>,<span class="number">5</span>,<span class="number">2</span>&#125;</span><br><span class="line">ages=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>]；</span><br><span class="line">ages=<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">76</span>,<span class="number">8</span>&#125;</span><br><span class="line">ages=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">6</span>]&#123;<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">42</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的使用（修改和读取）"><a href="#数组的使用（修改和读取）" class="headerlink" title="数组的使用（修改和读取）"></a>数组的使用（修改和读取）</h2><p>通过索引（下标），索引从0开始。<br>可以把数组想象成一个火车，一个车厢里面存储的就是数据元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//声明int类型的数据</span><br><span class="line">       int[] ages=&#123;46,45,3,53,5,2&#125;</span><br><span class="line">//数组的数据有下标   0  1  2 3  4 5</span><br><span class="line">//数组名[索引]</span><br><span class="line">age[index]</span><br></pre></td></tr></table></figure><blockquote><p>注意：不能访问索引不存在的值</p></blockquote><h1 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h1><blockquote><p>1.声明一个int的数组，数组大小为9<br>2.声明一个char的数组，数组长度为20<br>3.声明一个float数组，数组长度为5<br>4.声明一个字符串数组，数组长度为8</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] inta = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">9</span>];</span><br><span class="line"><span class="built_in">char</span>[] chara=<span class="keyword">new</span> <span class="built_in">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">float</span>[] floata = <span class="keyword">new</span> <span class="built_in">float</span>[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">string</span>[] stringa = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">8</span>];</span><br></pre></td></tr></table></figure><h1 id="这么遍历一个数组？（正序和倒序）"><a href="#这么遍历一个数组？（正序和倒序）" class="headerlink" title="这么遍历一个数组？（正序和倒序）"></a>这么遍历一个数组？（正序和倒序）</h1><blockquote><p>遍历就是取得数组中的每一个值<br> 遍历索引-通过索引访问元素</p></blockquote><p> 1.通过for和while遍历一个数组<br> 2.通过foreach遍历一个数组</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> int[] ages = &#123; 23, 45, 67, 12, 34, 56, 8, 34, 23, 3 &#125;;</span><br><span class="line">for(int i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(ages[i]+&quot; &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[] ages = &#123; 23, 45, 67, 12, 34, 56, 8, 34, 23, 3 &#125;;</span><br><span class="line">for(int i = 9; i&gt;=0; i--)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(ages[i]+&quot; &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在我们不知道数组的长度时可以用ages.Length获取ages的长度。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">int</span>[] ages = &#123; <span class="number">23</span>, <span class="number">45</span>, <span class="number">67</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">34</span>, <span class="number">23</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;ages.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(ages[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int[] ages = &#123; 23, 45, 67, 12, 34, 56, 8, 34, 23, 3 &#125;;</span><br><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 10)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(ages[i]+&quot; &quot;);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">```CSHARP倒序</span><br><span class="line">int[] ages = &#123; 23, 45, 67, 12, 34, 56, 8, 34, 23, 3 &#125;;</span><br><span class="line">int i = 9;</span><br><span class="line">while (i &gt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(ages[i]+&quot; &quot;);</span><br><span class="line">    i--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><blockquote><p>在C#中，foreach 循环是一种简洁且高效的方式来遍历数组、集合或任何实现了 IEnumerable 或 IEnumerable<T>接口的对象。foreach 循环会自动处理迭代过程，你只需要关注每个元素的处理逻辑。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">int</span>[] ages = &#123; <span class="number">23</span>, <span class="number">45</span>, <span class="number">67</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">34</span>, <span class="number">23</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> age <span class="keyword">in</span> ages)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(age+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp基本数据类型—浮点型，类型转换学习笔记</title>
      <link href="/2024/11/27/csharp%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B2/"/>
      <url>/2024/11/27/csharp%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp基本数据类型：浮点型"><a href="#Csharp基本数据类型：浮点型" class="headerlink" title="Csharp基本数据类型：浮点型"></a>Csharp基本数据类型：浮点型</h1><blockquote><p>浮点数值类型表示实数。 所有浮点型数值类型均为值类型。 它们还是简单类型，可以使用文本进行初始化。 所有浮点数值类型都支持算术、比较和相等运算符。</p></blockquote><h2 id="浮点类型的特征"><a href="#浮点类型的特征" class="headerlink" title="浮点类型的特征"></a>浮点类型的特征</h2><p><img src="/img%5Cfudianxing.png"></p><p>1.浮点数在计算机中是以IEEE 754标准来存储的，这意味着它们可以表示非常大或非常小的数，并且可以表示非整数。</p><p>2.以下是一些关于C#浮点型的重要点：</p><blockquote><p>浮点数的精度是有限的，因此在进行浮点数运算时可能会出现精度损失。<br>浮点数可以表示正数、负数和零。<br>浮点数也可以表示特殊值，如正无穷(double.PositiveInfinity)、负无穷(double.NegativeInfinity)和NaN（不是一个数字，double.NaN）。<br>在比较浮点数时，应该使用一定的容差来判断两个数是否“相等”，因为直接比较可能会因为精度问题导致不准确的结果。<br>浮点数的舍入模式可以通过Math.Round方法或者MidpointRounding枚举来控制。<br>使用浮点型时，需要考虑到这些特性和限制，以确保程序的正确性和健壮性。</p></blockquote><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><p>1.在C#中，转义字符是一种特殊的字符序列，以反斜杠（\）开始，用来表示那些不能直接表示的字符或者具有特殊含义的字符。以下是一些常用的转义字符：</p><blockquote><p>1.换行符（\n）：插入一个新行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(&quot;Hello,\nWorld!&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>2.回车符（\r）：将光标移动到当前行的开头。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(&quot;Hello,\rWorld!&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>3.制表符（\t）：插入一个水平制表符（Tab）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(&quot;Hello,\tWorld!&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>4.反斜杠（\）：表示一个实际的反斜杠字符。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string path = &quot;C:\\Program Files\\Example&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>5.单引号（&#39;）：表示一个单引号字符。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string text = &quot;He&#x27;s the one.&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>6.双引号（&quot;）：表示一个双引号字符。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string text = &quot;He said \&quot;Hello\&quot; to me.&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>7.问号（?）：表示一个问号字符。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string text = &quot;What&#x27;s this?&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>8.空字符（\0）：表示一个空字符（null character）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string text = &quot;Hello\0World&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>9.Unicode转义序列（\uXXXX 或 \UXXXXXXXX）：表示一个Unicode字符，其中XXXX是四位十六进制数，XXXXXXXX是八位十六进制数。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string text = &quot;\u00A9&quot;; // © symbol</span><br><span class="line">string text = &quot;\U0001F600&quot;; // 😀 emoji</span><br></pre></td></tr></table></figure><blockquote><p>10.八进制转义序列（\XXX）：表示一个ASCII字符，其中XXX是三位八进制数。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string text = &quot;\7&quot;; // 表示ASCII码为7的字符，即BEL（响铃）字符</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp基本数据类型—整型学习笔记</title>
      <link href="/2024/11/26/csharp%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2024/11/26/csharp%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp基本数据类型：整型"><a href="#Csharp基本数据类型：整型" class="headerlink" title="Csharp基本数据类型：整型"></a>Csharp基本数据类型：整型</h1><blockquote><p>整型数值类型 表示整数。 所有的整型数值类型均为值类型。 它们还是简单类型，可以使用文本进行初始化。 所有整型数值类型都支持算术、位逻辑、比较和相等运算符。</p></blockquote><p>1.C# 支持以下预定义整型类型：<br><img src="/img%5Czhengxing.png"></p><h2 id="在C-中，整数数据类型分为有符号和无符号两种，它们的主要区别在于值的范围和是否包含负数。"><a href="#在C-中，整数数据类型分为有符号和无符号两种，它们的主要区别在于值的范围和是否包含负数。" class="headerlink" title="在C#中，整数数据类型分为有符号和无符号两种，它们的主要区别在于值的范围和是否包含负数。"></a>在C#中，整数数据类型分为有符号和无符号两种，它们的主要区别在于值的范围和是否包含负数。</h2><p>1.有符号整数（Signed Integers）：</p><blockquote><p>可以表示正数、负数和零。<br>常见的有符号整数类型包括：<br>sbyte：8位有符号整数，范围从 -128 到 127。<br>short：16位有符号整数，范围从 -32,768 到 32,767。<br>int：32位有符号整数，范围从 -2,147,483,648 到 2,147,483,647。<br>long：64位有符号整数，范围从 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807。</p></blockquote><p>2.无符号整数（Unsigned Integers）：</p><blockquote><p>只能表示正数和零，不能表示负数。<br>常见的无符号整数类型包括：<br>byte：8位无符号整数，范围从 0 到 255。<br>ushort：16位无符号整数，范围从 0 到 65,535。<br>uint：32位无符号整数，范围从 0 到 4,294,967,295。<br>ulong：64位无符号整数，范围从 0 到 18,446,744,073,709,551,615。</p></blockquote><p>3.区别：</p><blockquote><p>值的范围：无符号整数类型的值范围从0开始，而有符号整数类型的值范围则包括负数。<br>内存占用：相同位数的有符号和无符号整数占用的内存大小是相同的，但是无符号整数可以表示更大的正数值。<br>溢出行为：当整数运算结果超出其类型所能表示的范围时，会发生溢出。有符号整数溢出时可能会变成一个负数，而无符号整数溢出时会从0开始循环。<br>默认值：有符号整数类型的默认值是0，而无符号整数类型的默认值也是0。<br>使用场景：有符号整数通常用于需要表示正负值的场景，而无符号整数通常用于计数器、索引、数组长度等只能取非负值的场景。<br>在实际编程中，选择使用有符号还是无符号整数类型，应根据具体的应用场景和需求来决定。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp循环嵌套九九乘法表、买鸡和最大公约数笔记</title>
      <link href="/2024/11/25/csharp%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
      <url>/2024/11/25/csharp%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp编程题，九九乘法表和百文买鸡问题"><a href="#Csharp编程题，九九乘法表和百文买鸡问题" class="headerlink" title="Csharp编程题，九九乘法表和百文买鸡问题"></a>Csharp编程题，九九乘法表和百文买鸡问题</h1><p>1.使用嵌套循环写出九九乘法表<br>分析：</p><blockquote><p>1.选择for语句进行嵌套循环<br> 2.最外层循环9次，子循环递增到9次</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            console.Write(<span class="string">&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125;&quot;</span>,j,i,i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 输出结果：<br> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> * <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> * <span class="number">2</span> = <span class="number">2</span>   <span class="number">2</span> * <span class="number">2</span> = <span class="number">4</span></span><br><span class="line"><span class="number">1</span> * <span class="number">3</span> = <span class="number">3</span>   <span class="number">2</span> * <span class="number">3</span> = <span class="number">6</span>   <span class="number">3</span> * <span class="number">3</span> = <span class="number">9</span></span><br><span class="line"><span class="number">1</span> * <span class="number">4</span> = <span class="number">4</span>   <span class="number">2</span> * <span class="number">4</span> = <span class="number">8</span>   <span class="number">3</span> * <span class="number">4</span> = <span class="number">12</span>   <span class="number">4</span> * <span class="number">4</span> = <span class="number">16</span></span><br><span class="line"><span class="number">1</span> * <span class="number">5</span> = <span class="number">5</span>   <span class="number">2</span> * <span class="number">5</span> = <span class="number">10</span>   <span class="number">3</span> * <span class="number">5</span> = <span class="number">15</span>   <span class="number">4</span> * <span class="number">5</span> = <span class="number">20</span>   <span class="number">5</span> * <span class="number">5</span> = <span class="number">25</span></span><br><span class="line"><span class="number">1</span> * <span class="number">6</span> = <span class="number">6</span>   <span class="number">2</span> * <span class="number">6</span> = <span class="number">12</span>   <span class="number">3</span> * <span class="number">6</span> = <span class="number">18</span>   <span class="number">4</span> * <span class="number">6</span> = <span class="number">24</span>   <span class="number">5</span> * <span class="number">6</span> = <span class="number">30</span>   <span class="number">6</span> * <span class="number">6</span> = <span class="number">36</span></span><br><span class="line"><span class="number">1</span> * <span class="number">7</span> = <span class="number">7</span>   <span class="number">2</span> * <span class="number">7</span> = <span class="number">14</span>   <span class="number">3</span> * <span class="number">7</span> = <span class="number">21</span>   <span class="number">4</span> * <span class="number">7</span> = <span class="number">28</span>   <span class="number">5</span> * <span class="number">7</span> = <span class="number">35</span>   <span class="number">6</span> * <span class="number">7</span> = <span class="number">42</span>   <span class="number">7</span> * <span class="number">7</span> = <span class="number">49</span></span><br><span class="line"><span class="number">1</span> * <span class="number">8</span> = <span class="number">8</span>   <span class="number">2</span> * <span class="number">8</span> = <span class="number">16</span>   <span class="number">3</span> * <span class="number">8</span> = <span class="number">24</span>   <span class="number">4</span> * <span class="number">8</span> = <span class="number">32</span>   <span class="number">5</span> * <span class="number">8</span> = <span class="number">40</span>   <span class="number">6</span> * <span class="number">8</span> = <span class="number">48</span>   <span class="number">7</span> * <span class="number">8</span> = <span class="number">56</span>   <span class="number">8</span> * <span class="number">8</span> = <span class="number">64</span></span><br><span class="line"><span class="number">1</span> * <span class="number">9</span> = <span class="number">9</span>   <span class="number">2</span> * <span class="number">9</span> = <span class="number">18</span>   <span class="number">3</span> * <span class="number">9</span> = <span class="number">27</span>   <span class="number">4</span> * <span class="number">9</span> = <span class="number">36</span>   <span class="number">5</span> * <span class="number">9</span> = <span class="number">45</span>   <span class="number">6</span> * <span class="number">9</span> = <span class="number">54</span>   <span class="number">7</span> * <span class="number">9</span> = <span class="number">63</span>   <span class="number">8</span> * <span class="number">9</span> = <span class="number">72</span>   <span class="number">9</span> * <span class="number">9</span> = <span class="number">81</span></span><br></pre></td></tr></table></figure><br>2.用100文买一百只鸡，其中公鸡，母鸡，都必须要有，公鸡3文一只，母鸡5文一只，小鸡2文一只，请问公鸡、母鸡、小鸡要买多少只刚好凑齐100文。<br>1.要求：每种鸡都要有且有几种买法。<br>2.分析：</p><blockquote><p>通过三层循环来遍历所有可能的公鸡、母鸡和小鸡的组合，以找到满足条件的解决方案。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> roosters=<span class="number">1</span>;roosters&lt;=<span class="number">100</span>/<span class="number">3</span>;roosters++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> hen = <span class="number">1</span>; hen &lt;= <span class="number">100</span> / <span class="number">5</span>; hen++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> pullet=<span class="number">1</span>; pullet&lt;=<span class="number">100</span> / <span class="number">2</span>; pullet++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((roosters * <span class="number">3</span> + hen * <span class="number">5</span> + pullet * <span class="number">2</span>) == <span class="number">100</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;公鸡：&#123;0&#125;，母鸡：&#123;1&#125;，小鸡：&#123;2&#125;&quot;</span>,roosters,hen,pullet);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>3.输入两个整数num1和num2,输出这两个正整数num1和num2的最大公约数。<br>1.分析：</p><blockquote><p>1.什么是最大公约数:两个或多个 整数 共有 约数 中最大的一个。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> num1=Convert.ToInt32(Console.ReadLine());</span><br><span class="line">    <span class="built_in">int</span> num2=Convert.ToInt32(Console.ReadLine());</span><br><span class="line">    <span class="built_in">int</span> min = num1;</span><br><span class="line">    <span class="keyword">if</span>(num2 &lt; min)</span><br><span class="line">    &#123;</span><br><span class="line">        min = num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = min; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num1 % i == <span class="number">0</span> &amp;&amp; num2 % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;最大公约数&quot;</span>+i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp循环嵌套基本用法学习笔记</title>
      <link href="/2024/11/25/csharp%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/"/>
      <url>/2024/11/25/csharp%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-循环嵌套的基本用法"><a href="#1-循环嵌套的基本用法" class="headerlink" title="1.循环嵌套的基本用法"></a>1.循环嵌套的基本用法</h1><blockquote><p>C# 中的循环嵌套是指在一个循环内部再包含另一个循环。这种结构通常用于处理多维数组或需要多级迭代的情况。以下是一些常见的循环嵌套示例，包括 for 循环和 foreach 循环的嵌套。</p></blockquote><p><font size="5">1.输入两个整数n和m,输出n行m列的*阵</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> n=Convert.ToInt32 (Console.ReadLine());</span><br><span class="line"><span class="built_in">int</span> m=Convert.ToInt32 (Console.ReadLine());</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font size="5">输出结果：</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p><font size="5">2.输入整数n,输出n层的三角形</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> n=Convert.ToInt32 (Console.ReadLine());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write (<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="5">输出结果：</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">******</span><br></pre></td></tr></table></figure><p><font size="5">3.输入整数n,输出n层的三角形的斜边。</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> n=Convert.ToInt32 (Console.ReadLine());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; i<span class="number">-1</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="5">输出结果：</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line">*</span><br><span class="line"> *</span><br><span class="line">  *</span><br><span class="line">   *</span><br><span class="line">    *</span><br><span class="line">     *</span><br></pre></td></tr></table></figure><p><font size="5">4.如果我们要让它反过来呢？.输入整数n。</font></p><blockquote><p>1.前面的题我们都是从小到大开始遍历，而这次是从大到小遍历。<br>2.因为是从大到小第一个for循环初始化i&#x3D;n;i&gt;0;i–;</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> n=Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = n; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; i<span class="number">-1</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="5">输出结果：</font></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line">     *</span><br><span class="line">    *</span><br><span class="line">   *</span><br><span class="line">  *</span><br><span class="line"> *</span><br><span class="line">*</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp认识新的类Random学习笔记</title>
      <link href="/2024/11/25/%E8%AE%A4%E8%AF%86%E6%96%B0%E7%9A%84%E7%B1%BBRandom/"/>
      <url>/2024/11/25/%E8%AE%A4%E8%AF%86%E6%96%B0%E7%9A%84%E7%B1%BBRandom/</url>
      
        <content type="html"><![CDATA[<h1 id="Csharp简单认识Random类"><a href="#Csharp简单认识Random类" class="headerlink" title="Csharp简单认识Random类"></a>Csharp简单认识Random类</h1><p>1.定义</p><blockquote><p>表示伪随机数生成器，这是一种能够产生满足某些随机性统计要求的数字序列的算法。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Random</span></span><br></pre></td></tr></table></figure><p>2.示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Random rd = <span class="keyword">new</span> Random();</span><br><span class="line">    Console.WriteLine(rd.Next(<span class="number">1</span>,<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br>随机1到10；</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="猜数字"><a href="#猜数字" class="headerlink" title="猜数字"></a>猜数字</h2><p>1.随机，循环，才对停止循环。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Random rd = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="built_in">int</span> number=rd.Next(<span class="number">1</span>,<span class="number">101</span>);</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> numberUser=Convert.ToInt32(Console.ReadLine());</span><br><span class="line">        <span class="keyword">if</span> (numberUser &gt; number)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;你猜大了&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numberUser&lt;number)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;你猜小了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(numberUser==number)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;你猜对了&quot;</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p> 输出结果：(随机，结果不唯一)<br> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">20</span></span><br><span class="line">你猜大了</span><br><span class="line"><span class="number">50</span></span><br><span class="line">你猜大了</span><br><span class="line"><span class="number">10</span></span><br><span class="line">你猜对了</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp笔记各种循环编程题二。</title>
      <link href="/2024/11/24/csharp%E7%BC%96%E7%A8%8B%E9%A2%982/"/>
      <url>/2024/11/24/csharp%E7%BC%96%E7%A8%8B%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<h1 id="1-编写一共程序，打印出所有的“水仙花数”，所谓“水仙花数”是指一个三位数，其各位数字立方等于该数本身。"><a href="#1-编写一共程序，打印出所有的“水仙花数”，所谓“水仙花数”是指一个三位数，其各位数字立方等于该数本身。" class="headerlink" title="1.编写一共程序，打印出所有的“水仙花数”，所谓“水仙花数”是指一个三位数，其各位数字立方等于该数本身。"></a>1.编写一共程序，打印出所有的“水仙花数”，所谓“水仙花数”是指一个三位数，其各位数字立方等于该数本身。</h1><p>1.要求：例如153&#x3D;1<em>1</em>1+5<em>5</em>5+3<em>3</em>3，所以153是“水仙花”。</p><p>2.输入153</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> ge = i % <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">int</span> shi = (i / <span class="number">10</span>) % <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">int</span> bai = i / <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == ge * ge * ge + shi * shi * shi + bai * bai * bai)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.输出结果：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">370</span></span><br><span class="line"><span class="number">371</span></span><br><span class="line"><span class="number">407</span></span><br></pre></td></tr></table></figure><h1 id="随机一个未知的整数，去除这个整数各个位上的0，形成新的数，并输出。"><a href="#随机一个未知的整数，去除这个整数各个位上的0，形成新的数，并输出。" class="headerlink" title="随机一个未知的整数，去除这个整数各个位上的0，形成新的数，并输出。"></a>随机一个未知的整数，去除这个整数各个位上的0，形成新的数，并输出。</h1><p>1.要求：输入的数字n大于0，小于1000000。</p><p>2.输入2020</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a= Convert.ToInt32(Console.ReadLine()); <span class="comment">//2020</span></span><br><span class="line"><span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> cheng = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> i = a % <span class="number">10</span>;<span class="comment">//0 202 //2 20//0 2 //2</span></span><br><span class="line">    <span class="keyword">if</span>(i != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i *= cheng; <span class="comment">//2 //2</span></span><br><span class="line">        sum+= i;<span class="comment">//2 //2</span></span><br><span class="line">        cheng *= <span class="number">10</span>;<span class="comment">//20 //20</span></span><br><span class="line">    &#125;</span><br><span class="line">    a = a / <span class="number">10</span>; <span class="comment">//2 //2</span></span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(sum); <span class="comment">//22</span></span><br></pre></td></tr></table></figure><p>3.输出结果：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure><h1 id="随机数入一个整数num-输出一个新的数，新数恰好与原数每一位上的数字相反（如果原数末尾有多个零，输出的新数高位不含0）"><a href="#随机数入一个整数num-输出一个新的数，新数恰好与原数每一位上的数字相反（如果原数末尾有多个零，输出的新数高位不含0）" class="headerlink" title="随机数入一个整数num,输出一个新的数，新数恰好与原数每一位上的数字相反（如果原数末尾有多个零，输出的新数高位不含0）"></a>随机数入一个整数num,输出一个新的数，新数恰好与原数每一位上的数字相反（如果原数末尾有多个零，输出的新数高位不含0）</h1><p>1.样例输入8736 输出6378<br>  样例输入2300 输出32</p><p>  2.输入8736</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num=Convert.ToInt32(Console.ReadLine());<span class="comment">//8736</span></span><br><span class="line"><span class="built_in">bool</span> yudao = <span class="literal">false</span>; <span class="comment">//默认还没有遇到第一个非0</span></span><br><span class="line"><span class="keyword">while</span> (num!=<span class="number">0</span>) <span class="comment">//从第到高位遍历</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> i = num % <span class="number">10</span>; <span class="comment">//6 873</span></span><br><span class="line">    <span class="comment">//判断是否遇到了第一个非0数字</span></span><br><span class="line">    <span class="comment">//已经遇到了第一个非0数字</span></span><br><span class="line">    <span class="comment">//不需要去掉0了</span></span><br><span class="line">    <span class="comment">//还没有遇到第一个非0数字</span></span><br><span class="line">    <span class="comment">//去掉</span></span><br><span class="line">    <span class="keyword">if</span> (yudao == <span class="literal">false</span>)<span class="comment">//还没有遇到第一个非0数字</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">0</span>)<span class="comment">//i=6</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(i);</span><br><span class="line">            <span class="comment">//标志位，标志是否达到了某个条件</span></span><br><span class="line">            yudao= <span class="literal">true</span>;<span class="comment">//确定i!=0时，停止判断</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">else</span><span class="comment">//i=3</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(i);</span><br><span class="line">        &#125;</span><br><span class="line">    num = num / <span class="number">10</span>;<span class="comment">//8736 873</span></span><br></pre></td></tr></table></figure><p>  3.输出结果<br>  <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6378</span></span><br></pre></td></tr></table></figure></p><h1 id="回文数和倒序读都是一样的整数。输入一个数，判断是否是回文数。输入的整数大于0，小于1000000。"><a href="#回文数和倒序读都是一样的整数。输入一个数，判断是否是回文数。输入的整数大于0，小于1000000。" class="headerlink" title="回文数和倒序读都是一样的整数。输入一个数，判断是否是回文数。输入的整数大于0，小于1000000。"></a>回文数和倒序读都是一样的整数。输入一个数，判断是否是回文数。输入的整数大于0，小于1000000。</h1><p>  1.要求：如果是回文输出yes，不是输出no。<br>  2.输入2397<br> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">int</span> n=Convert.ToInt32(Console.ReadLine());<span class="comment">//2992</span></span><br><span class="line"><span class="built_in">int</span> tempN = n;</span><br><span class="line"><span class="built_in">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (tempN != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> i = tempN % <span class="number">10</span>;<span class="comment">//2 299  //9 29 //9 2 //2</span></span><br><span class="line">    number *= <span class="number">10</span>;<span class="comment">//0*10=0 //20 //290 //2990</span></span><br><span class="line">    number += i;<span class="comment">//2 //29 //299 //2992</span></span><br><span class="line">    tempN = tempN / <span class="number">10</span>;<span class="comment">//299 //29 //2 //0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (number == n)</span><br><span class="line">&#123;</span><br><span class="line">   Console.WriteLine(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.输出结果：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp笔记各种循环编程题一。</title>
      <link href="/2024/11/22/csharp%E7%BC%96%E7%A8%8B%E9%A2%981/"/>
      <url>/2024/11/22/csharp%E7%BC%96%E7%A8%8B%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<h1 id="1-一个球从某一高度落下，每次落地后反跳回原来高度的一半，再落下。"><a href="#1-一个球从某一高度落下，每次落地后反跳回原来高度的一半，再落下。" class="headerlink" title="1.一个球从某一高度落下，每次落地后反跳回原来高度的一半，再落下。"></a>1.一个球从某一高度落下，每次落地后反跳回原来高度的一半，再落下。</h1><p>1.要求：球第十次反弹多高？在第十次落地时，共经过多少米？<br>2.要求：输入球的初始高度，输出反弹多高，和经过了多少米。</p><p>3.分析：</p><blockquote><p>1.我们可以用int n来确定球的从多高往下弹。<br>    2.再利用for循环来求出球体的第十次反弹多高和经过了多少米<br>    3.可以用double来定义high存储第十次的高，因为反弹是原来的一半，for的表达式：high&#x2F;&#x3D;2;。<br>    4.再用double来定义distance存储反弹的和，2*n来确定第一次谈的高，因为反弹是原来的一半<br>    第2个for的表达式：distance&#x2F;&#x3D;2;。</p></blockquote><p>4.输入100。</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> n=Convert.ToInt32 (Console.ReadLine());</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> high = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    high /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine (high);</span><br><span class="line"><span class="built_in">double</span> distance = <span class="number">2</span> * n;</span><br><span class="line"><span class="built_in">double</span> sum = n;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i= <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    distance /= <span class="number">2</span>;</span><br><span class="line">    sum += distance;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine (sum);</span><br></pre></td></tr></table></figure><p> 5.输出结果：<br> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0.09765625</span></span><br><span class="line"><span class="number">299.609375</span></span><br></pre></td></tr></table></figure></p><h1 id="2-输入一个整数a，和一个正整数n，计算乘方a的次方"><a href="#2-输入一个整数a，和一个正整数n，计算乘方a的次方" class="headerlink" title="2.输入一个整数a，和一个正整数n，计算乘方a的次方"></a>2.输入一个整数a，和一个正整数n，计算乘方a的次方</h1><p>1.要求：使用循环来计算a的次方。</p><p>2.分析：</p><blockquote><p>1.用int a和n。在double来定义一个变量sum来存储a的次方，再利用for循环来判断次方大小。for循环表达式：sum*&#x3D;n;</p></blockquote><p>3.输入a&#x3D;5,n&#x3D;5</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;           </span><br><span class="line">    <span class="built_in">int</span> a = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">    <span class="built_in">int</span> n = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">    <span class="built_in">double</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum *= n;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(sum);</span><br></pre></td></tr></table></figure><p>4.输出结果：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3125</span></span><br></pre></td></tr></table></figure><h1 id="3-我国现有x亿人口，按每年0-1-的增长速度，n年后将有多少人？"><a href="#3-我国现有x亿人口，按每年0-1-的增长速度，n年后将有多少人？" class="headerlink" title="3.我国现有x亿人口，按每年0.1%的增长速度，n年后将有多少人？"></a>3.我国现有x亿人口，按每年0.1%的增长速度，n年后将有多少人？</h1><p>1.要求：使用循环求n年后有多少人。</p><p>2.分析：</p><blockquote><p>1.人口是用数字统计，我们可用double定义一个值，在int nian定义过了多少年。<br>2.用for循环，表达式：rankou*&#x3D;1.001;</p></blockquote><p>3.输入rankou&#x3D;120000,nian&#x3D;12</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"><span class="built_in">double</span> rankou = Convert.ToInt32(Console.ReadLine());</span><br><span class="line"> <span class="built_in">int</span> nian = Convert.ToInt32(Console.ReadLine());</span><br><span class="line"> <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nian; i++)</span><br><span class="line"> &#123;</span><br><span class="line">     rankou *= <span class="number">1.001</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> Console.WriteLine(rankou);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 4.输出结果：<br> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">121447.94645949498</span></span><br></pre></td></tr></table></figure></p><h1 id="投资，已知投资的复合利率为R-0到20之间的整数-。投M钱（100到1000000之间的整数）。投资Y年（范围0到400）。"><a href="#投资，已知投资的复合利率为R-0到20之间的整数-。投M钱（100到1000000之间的整数）。投资Y年（范围0到400）。" class="headerlink" title="投资，已知投资的复合利率为R(0到20之间的整数)。投M钱（100到1000000之间的整数）。投资Y年（范围0到400）。"></a>投资，已知投资的复合利率为R(0到20之间的整数)。投M钱（100到1000000之间的整数）。投资Y年（范围0到400）。</h1><p> 1.要求：投资共赚多少钱？</p><p> 2.分析：</p><blockquote><p>1.复合利率给我们的范围是0到20之间，我就取10好了，复合利率是10除100就是它的复合利率。<br>2.用double来第一变量R、M、Y,和sum来存储答案。</p></blockquote><p>3.输入R&#x3D;10，M&#x3D;50000，Y&#x3D;20</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="built_in">double</span> R=Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="built_in">double</span> M=Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="built_in">double</span> Y=Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="built_in">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i =<span class="number">0</span>;i&lt;Y;i++)</span><br><span class="line">&#123;</span><br><span class="line">    M *= (R / <span class="number">100.0</span>) + <span class="number">1</span>;</span><br><span class="line">    sum += M;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.输出结果：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3150124.972129084</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程题：用循环做出挖掘数字并计算和（笔记）</title>
      <link href="/2024/11/20/csharp%E5%AD%97%E7%AC%A6%E8%AF%BB%E5%8F%96/"/>
      <url>/2024/11/20/csharp%E5%AD%97%E7%AC%A6%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="1-挖掘数字，并并计算这些数字的和"><a href="#1-挖掘数字，并并计算这些数字的和" class="headerlink" title="1.挖掘数字，并并计算这些数字的和"></a><font size="8"><b>1.挖掘数字，并并计算这些数字的和</font></b></h1><blockquote><p>知识点：<br>1.如何读取一个字符输入<br>2.输入缓冲区<br>3.break跳出循环</p></blockquote><p><font size="5"><b>1.数字和字符混合在一起了，作为一个优秀的挖掘人员，把输入的数字挖出来并计算这些数字的和，并输出。输入以@作为结束。 样例输入23a34b34@  样例输出19</p><blockquote><p>只学到循环如何做出这道难题</fotn></b></p></blockquote><p><font size="5"><b>2.分析：</fotn></b></p><blockquote><p>1.这题我们可以用ASCII码来做，用char输出字符。<br>2。用if来判断是否是数字。<br>在int定义一个变量来存储和</p></blockquote><p><font size="5">3.输入值：234SKHF23@</fotn></b></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span> c;</span><br><span class="line"><span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    c = (<span class="built_in">char</span>)Console.Read();</span><br><span class="line">    <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> number = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        sum += number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (c != <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">Console.WriteLine(sum);</span><br></pre></td></tr></table></figure><p><font size="5">4.输出结果：</fotn></b></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">234</span>SKHF23@</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure><h1 id="什么是缓冲区"><a href="#什么是缓冲区" class="headerlink" title="什么是缓冲区"></a><font size="8"><b>什么是缓冲区</font></b></h1><blockquote><p>在C#中，缓冲区通常指的是一块内存区域，用于临时存储数据。缓冲区在处理I&#x2F;O操作（如文件读写、网络通信等）时非常有用，因为它们可以减少实际的I&#x2F;O操作次数，提高性能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量的作用域</title>
      <link href="/2024/11/19/%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2024/11/19/%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="C-变量里的作用域"><a href="#C-变量里的作用域" class="headerlink" title="C#变量里的作用域"></a><font size="8">C#变量里的作用域</font></b></h1><p><font size="6">一.什么是作用域</font></b></p><blockquote><p>作用域（Scope）是编程中的一个基本概念，它定义了代码中变量、函数、类等实体的可见性和生命周期。作用域决定了在程序的哪些部分可以访问或修改这些实体。</p></blockquote><p><font size="6">二.C#变量作用域中一些关键点</font></b></p><p>1.局部作用域是指在编程中，变量或函数仅在定义它们的特定代码块或区域内可见和可访问的作用域。这种作用域通常与局部变量和局部函数相关联，它们只在创建它们的函数、方法或代码块内部有效。以下是局部作用域的一些关键特点：</p><p>定义位置：局部变量或函数通常在函数、方法或代码块内部定义。</p><p>可见性：局部变量或函数只在定义它们的函数、方法或代码块内部可见。一旦代码执行离开了这个区域，局部变量或函数就不再可访问。</p><p>生命周期：局部变量的生命周期通常与定义它们的函数或代码块的执行周期相同。当函数或代码块执行结束时，局部变量会被销毁，占用的内存会被释放。</p><p>初始化：在某些编程语言中，局部变量在使用前必须被初始化，否则可能会引发错误或警告。</p><p>同名变量：在不同的函数或代码块中可以定义同名的局部变量，它们是独立的，互不影响。</p><p>参数传递：当函数或方法被调用时，实参的值会被复制到对应的局部变量（形参）中，局部变量的修改不会影响实参的值，除非使用了引用传递或指针。</p><p>作用域链：在支持闭包的语言中，局部变量可以被嵌套函数访问，形成作用域链。</p><p>重用性：局部变量的名称可以在不同的函数或代码块中重复使用，因为它们的作用域是独立的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Main方法开始执行&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 定义一个局部变量</span></span><br><span class="line">            <span class="built_in">int</span> localVar = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// localVar仅在这个代码块内部可见</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;局部变量的值: &quot;</span> + localVar);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在这个点，localVar不再存在，因为它的作用域已经结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在C#中，全局作用域的概念与传统的全局变量有所不同。C#是一种面向对象的编程语言，它鼓励封装和模块化，因此并不直接支持传统意义上的全局变量。然而，可以通过以下几种方式来实现全局可访问的数据：</p><blockquote><p>静态成员变量和静态属性：<br>在C#中，可以通过静态类和静态成员来模拟全局变量的效果。静态成员属于类本身，而不是类的任何特定实例。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">csharp</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Global</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> GlobalValue = <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在程序的任何地方都可以这样访问</span></span><br><span class="line"><span class="built_in">int</span> <span class="keyword">value</span> = Global.GlobalValue;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for语句学习笔记</title>
      <link href="/2024/11/12/for%E8%AF%AD%E5%8F%A5/"/>
      <url>/2024/11/12/for%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="for循环笔记"><a href="#for循环笔记" class="headerlink" title="for循环笔记"></a><font size="8"></b>for循环笔记</font></b></h1><blockquote><p>for循环输出执行循环次数<br>for(初始化；条件表达式；增量表达式)<br>{  &#x2F;&#x2F;循环体<br>}</p></blockquote><p><b><font size="5">1.fot循环的基本结构</font></b></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b><font size="5">2.fot语句的元素</font></b></p><blockquote><p>“初始化表达式”部分仅在进入循环前执行一次。 通常，在该部分中声明并初始化局部循环变量。 不能从 for 语句外部访问声明的变量。</p></blockquote><p>上例中的“初始化表达式”部分声明并初始化整数计数器变量：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>“条件”部分确定是否应执行循环中的下一个迭代。 如果计算结果为 true 或不存在，则执行下一个迭代；否则退出循环。 “条件”部分必须为布尔表达式。</p></blockquote><p>上例中的“条件”条件部分检查计数器值是否小于 10：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i&lt;<span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>“迭代器”部分定义循环主体的每次执行后将执行的操作。</p></blockquote><p>上例中的“迭代器”部分增加计数器：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i++</span><br></pre></td></tr></table></figure><blockquote><p>循环体，必须是一个语句或一个语句块。</p></blockquote><h2 id="用for循环进行简单的计算"><a href="#用for循环进行简单的计算" class="headerlink" title="用for循环进行简单的计算"></a><font size="7">用for循环进行简单的计算</font></h2><p><font size="5"><b>1.进行计算整数1-100的和<font></b></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>;i&lt;<span class="number">101</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    sum += i; </span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(sum);</span><br><span class="line">                          </span><br></pre></td></tr></table></figure><p><font size="5"></b>2.求1-100的偶数</font></b></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>;i&lt;<span class="number">101</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="5"><b>3.输入俩个整数n和m，计算n和m（包括n和m)所有能被17整除的数的和，并输出和。</font></b> </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> n=Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="built_in">int</span> m=Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">int</span> i = n; i &lt;= m; i++)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (i % <span class="number">17</span> == <span class="number">0</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         sum += i;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> Console.WriteLine(sum);</span><br></pre></td></tr></table></figure><p> <font size="5"><b>4.输入俩个整数n和m，利用for循环打印出n和m之间（包含n和m），所用的奇数和所用的偶数。<br> 奇数放一行，用空格分割。偶数放一行，用空格分割。</font></b></p><blockquote><p>应为要同时输出奇数和偶数，我们可以先定义俩个字符串(string)进行存储。<br> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">int</span> n=Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="built_in">int</span> m=Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="built_in">string</span> oddNumbers = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> numbered = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">int</span> i = n; i &lt;= m; i++)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         oddNumbers += i+<span class="string">&quot; &quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         numbered += i+<span class="string">&quot; &quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> Console.WriteLine(oddNumbers);</span><br><span class="line"> Console.WriteLine(numbered);</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a><font size="8"><b>break语句</font></b></h2><blockquote><p>break 语句：将终止最接近的封闭迭代语句（即 for、foreach、while 或 do 循环）或 switch 语句。 break 语句将控制权转交给已终止语句后面的语句</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( ; ; )</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine( i );</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>while循环语句</title>
      <link href="/2024/11/10/while%E8%AF%AD%E5%8F%A5/"/>
      <url>/2024/11/10/while%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a><font size="8"></b>while循环语句</font></b></h1><blockquote><p>在指定的布尔表达式的计算结果为 true 时，while 语句会执行一条语句或一个语句块。 由于在每次执行循环之前都会计算此表达式，所以 while 循环会执行零次或多次。</p></blockquote><h2 id="while语句基本结构"><a href="#while语句基本结构" class="headerlink" title="while语句基本结构"></a><font size="5"><b>while语句基本结构</font></b></h2><p><img src="/img%5Cyouxin%5Cwhile1.png"><br><b>1.while语句基本用法</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int x = 1;</span><br><span class="line">while (x&lt;10)    //条件判断</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(x);</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(&quot;x&gt;10&quot;);   //条件不满足，执行代码</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="while循环求和"><a href="#while循环求和" class="headerlink" title="while循环求和"></a><font size="5"><b>while循环求和</font></b></h2><p><b>1.控制循环次数？循环1-100。</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int x=1;</span><br><span class="line">while(x&lt;100)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(x);</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>2.用while就1-100的整数和</b><br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> //第一种方式//局限性、固定的循环次数</span><br><span class="line"> int a = 1;</span><br><span class="line">int sum = 0;    //存放和</span><br><span class="line">while (a &lt; 101)</span><br><span class="line">&#123;</span><br><span class="line">    sum += a;  //sun=sum+a</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(sum);</span><br><span class="line"></span><br><span class="line">//第二种方式//可以设置你像输出的循环次数</span><br><span class="line"> int n=Convert.ToInt32(Console.ReadLine());</span><br><span class="line"> int a = 1;</span><br><span class="line"> int sum = 0;</span><br><span class="line"> while (a &lt; n+1)</span><br><span class="line"> &#123;</span><br><span class="line">     sum += a;</span><br><span class="line">     a++;</span><br><span class="line"> &#125;</span><br><span class="line"> Console.WriteLine(sum);</span><br></pre></td></tr></table></figure><br><b>3.输出1-100的偶数</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int n = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">int a = 1;</span><br><span class="line">while (a &lt; n+1)</span><br><span class="line">&#123;</span><br><span class="line">    if (a % 2 == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">    &#125;</span><br><span class="line">    a++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><b>4.输入俩个整数n1,n2,输出n1-n2之间所有的偶数</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int n1=Convert.ToInt32(Console.ReadLine());</span><br><span class="line">int n2=Convert.ToInt32(Console.ReadLine());</span><br><span class="line">while (n1 &lt; n2 + 1)</span><br><span class="line">&#123;</span><br><span class="line">    if (n1 % 2 == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(n1);</span><br><span class="line">    &#125;</span><br><span class="line">    n1++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>5.3n+1:对于任意大于1的自然数n，若n为奇数，将n编程3n+1，否则变成n的一半。经过若干次这样的变化，n一定会最终变成1，比如，7→22→11→34→17→52→26→13→40→20→10→5→16→8→4→2→1<br>输入n，输出变化次数。</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int num = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">int a = 0;</span><br><span class="line">while (num != 1)</span><br><span class="line">&#123;</span><br><span class="line">    if (num % 2 == 1)</span><br><span class="line">    &#123;</span><br><span class="line">        num = 3 * num + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        num /= 2;</span><br><span class="line">    &#125;</span><br><span class="line">    a++;</span><br><span class="line">    Console.WriteLine(&quot;变换后的值&quot;+num);</span><br><span class="line">&#125; Console.WriteLine(&quot;变换的次数&quot;+a);</span><br></pre></td></tr></table></figure><h1 id="do-while循环学习笔记"><a href="#do-while循环学习笔记" class="headerlink" title="do-while循环学习笔记"></a><font size="8"><b>do-while循环学习笔记</font></b></h1><h2 id="do-while的基本结构"><a href="#do-while的基本结构" class="headerlink" title="do-while的基本结构"></a><font size="6"><b>do-while的基本结构</font></b></h2><blockquote><p>在指定的布尔表达式的计算结果为 true 时，do 语句会执行一条语句或一个语句块。 由于在每次执行循环之后都会计算此表达式，所以 do 循环会执行一次或多次。 do 循环不同于 while 循环（该循环执行零次或多次）。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(n);</span><br><span class="line">    n++;</span><br><span class="line">&#125; <span class="keyword">while</span> (n &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装AE插件</title>
      <link href="/2024/11/06/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/"/>
      <url>/2024/11/06/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="AE插件的安装"><a href="#AE插件的安装" class="headerlink" title="AE插件的安装"></a><font size="8">AE插件的安装</font></h1><blockquote><p>学剪辑想要有电影那样的好看特效就少不了插件的帮助，这期教大家下载插件</p></blockquote><h2 id="插件在哪下载呢？"><a href="#插件在哪下载呢？" class="headerlink" title="插件在哪下载呢？"></a><font size="6">插件在哪下载呢？</font></h2><p><font size="4"><b>1.还是有很多人不知道插件在哪下载，有很多人在b站搜AE插件安装，基本都是都是加微信，交钱进群啥的！浪费时间和钱插件还没拿到。</font></b></p><blockquote><p>这里我分享最全的下插件网站：<a href="https://www.lookae.com/">https://www.lookae.com/</a></p></blockquote><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a><font size="6">安装步骤</font></h2><p><font size="4"><b>1.打开looke.ae这个网站，在搜索框中输入你要安装的插件，博主就用<font color="red">Magic Bullet Suite v2023.2.1（红巨人）</font>这个插件来教大家安装：</font></b></p><blockquote><p>这个也是做剪辑常用的调色插件</p></blockquote><p><font size="4"><b>2.第一步，找到要下载的插件并看它是否支持你的AE的版本，选择下载方式。</font></b></p><blockquote><p>下面中文汉化是需要付费的且更新没有英文的快（推荐英文版）</p></blockquote><p><img src="/img%5Cyouxin%5CMan.png"><br><font size="4"><b>3.将我们下载的文件进行解压（推荐Bandizip这个解压软件，电脑自带的微软商店就可以下载到.）</font></b><br><img src="/img%5Cyouxin%5CMan1.png"></p><h2 id="按照步骤即可"><a href="#按照步骤即可" class="headerlink" title="按照步骤即可"></a>按照步骤即可</h2><p><font size="4"><b>4. 1..Maxon_App_2023.2.2_Win.exe，不要登录，安装完成之后关闭即可<br>2.安装Magic Bullet Suite Installer.exe，安装完成之后关闭即可<br>3.安装Unlocker 2023.2.1.exe，即可完成激活。</font></b></p>]]></content>
      
      
      <categories>
          
          <category> AE </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>素材补帧、4k</title>
      <link href="/2024/11/04/%E7%B4%A0%E6%9D%90%E8%A1%A5%E5%B8%A7%EF%BC%8C4k/"/>
      <url>/2024/11/04/%E7%B4%A0%E6%9D%90%E8%A1%A5%E5%B8%A7%EF%BC%8C4k/</url>
      
        <content type="html"><![CDATA[<h1 id="给素材补帧让视频变得丝滑"><a href="#给素材补帧让视频变得丝滑" class="headerlink" title="给素材补帧让视频变得丝滑"></a>给素材补帧让视频变得丝滑</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><blockquote><p>给视频补帧，先给视频进行抽帧在补帧效果更好，下面是操作步骤：</p></blockquote><p>1.将视频导入AE,抽帧就是以你要补帧的人物（主体）为第一要素，第一要素动了就裁剪一次：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;border-radius: 12px">    <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113429784298208&bvid=BV1uTDhYTEBV&cid=26627605593&p=1" page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 80%; width: 100%;border-radius: 12px"> </iframe></div>2.将视频用Me导出来（也是looked.ae下载），在进行补帧。<blockquote><p>1.我在这里分享两个好用的补帧软件，让你的视频丝滑无比。</p></blockquote><h2 id="第一个：Flowframes"><a href="#第一个：Flowframes" class="headerlink" title="第一个：Flowframes"></a>第一个：<font color="blue">Flowframes</font></h2><p>2.第一步打开flow,如图：↓<br><img src="/img%5Cflow.png"><br>3.点击Browse(Video)，选择要补帧的片段，在选择你要补的帧数按interpolate开始补帧。</p><h2 id="第二个：SVFI"><a href="#第二个：SVFI" class="headerlink" title="第二个：SVFI"></a>第二个：<font color="blue">SVFI</font></h2><p>1.这个补帧软件是我用过最好的，唯一的缺点就是要钱但只补帧的话只需买社区服43元（steam上面购买），这个软件还可以补4K、8k、超分。（但要买专业版328）<br>我这有平替，他就是：<font size="5">VideoAIportable</font></p><h2 id="第二个：SVFI-1"><a href="#第二个：SVFI-1" class="headerlink" title="第二个：SVFI"></a>第二个：<font color="blue">SVFI</font></h2><p>1.这个补帧软件是我用过最好的，唯一的缺点就是要钱但只补帧的话只需买社区服43元（steam上面购买），这个软件还可以补4K、8k、超分。（但要买专业版328）<br>我这有平替，他就是：<font size="5">Topaz VideoAIportable</font></p><p>2.先用SVFI进行补帧。打开SVFI的高级设置先进行调试，可以参考我的来：<br>一.<img src="/img%5Cyouxin%5Csvfi.png"><br>二.<img src="/img%5Cyouxin%5Csvfi1.png"><br>三.<img src="/img%5Cyouxin%5Csvfi2.png"><br>四.<img src="/img%5Cyouxin%5Csvfi3.png"></p><h2 id="视频补4K"><a href="#视频补4K" class="headerlink" title="视频补4K"></a>视频补4K</h2><p>没有 <font size="4">Topaz VideoAIportable</font> 的在looke.ae也可以下载的。</p><p>1.打开<font size="4">Topaz VideoAIportable</font>导入素材可以按照我这样设置：<br><img src="/img%5Cyouxin%5CTopaz.png"><br><font size="4">请看对比</font></p><p><img src="/img%5Cyouxin%5CTopaz1.png"><br>2.导出即可</p>]]></content>
      
      
      <categories>
          
          <category> AE </category>
          
          <category> SVFI </category>
          
          <category> Topaz VideoAIportable </category>
          
          <category> Flowframes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AE素材获取</title>
      <link href="/2024/10/30/AE%E7%B4%A0%E6%9D%90%E6%8F%90%E7%BA%AF/"/>
      <url>/2024/10/30/AE%E7%B4%A0%E6%9D%90%E6%8F%90%E7%BA%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="学习漫剪第一步：获取素材"><a href="#学习漫剪第一步：获取素材" class="headerlink" title="学习漫剪第一步：获取素材"></a><b>学习漫剪第一步：获取素材</b></h1><blockquote><p>我们下好软件之和就是去寻找素材，很多人都不知道或是用录频软件去录制带字幕的视频，这里我分享资源多可以下载生肉的网站。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mikanime.tv/</span><br></pre></td></tr></table></figure><p>1.这个网站只能下载种子到迅雷把视频下载下来。</p><blockquote><p>看到这就有人问博主博主网上不是有很多免费bit下载软件，博主为啥还是推荐迅雷呢？<br>因为迅雷不充钱也比这些免费bit下载速度快。</p></blockquote><p>2.下面是图片描述：<br><img src="/img/mingan.png" alt="图片描述"><br>3.然后搜索你要下载的动漫种子，点击种子自动跳转迅雷下载所选择的盘。<br><img src="/img/mangan1.png" alt="图片描述"><br>4.<b>博主前期出一些操作简单，内容不会很多且好理解的教程。</b></p>]]></content>
      
      
      <categories>
          
          <category> AE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蜜柑计划 </tag>
            
            <tag> 迅雷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常</title>
      <link href="/2024/10/30/YOUXIANDEYU/"/>
      <url>/2024/10/30/YOUXIANDEYU/</url>
      
        <content type="html"><![CDATA[<h1 id="博主的随心日常"><a href="#博主的随心日常" class="headerlink" title="博主的随心日常"></a></b><em>博主的随心日常</em></b></h1><h2 id="2024年"><a href="#2024年" class="headerlink" title="2024年"></a>2024年</h2><h3 id="11月1日"><a href="#11月1日" class="headerlink" title="11月1日"></a>11月1日</h3><!-- <div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;border-radius: 12px">    <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113316101884629&bvid=BV1TRmAYSE94&cid=26314608616&p=1" page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 80%; width: 100%;border-radius: 12px"> </iframe></div> --><blockquote><p>今天明日方舟更新5.5周年了（有没有和博主玩一样的游戏啊），攒了70抽开开心心上线抽卡，出了俩个金，歪了个叔叔潜能+1。给我出个没有的都好啊！<br>说说我对这游戏的评价吧，21年那会儿我是被同学带入坑的那时第一次接触这种类型的游戏感觉很好玩很新颖，后面也玩过很多这种类型的二游但还是明日方舟更好，尽管现在不怎么玩了。<br>可能是新鲜感过了吧。关卡出的没意思，抽卡一直是非酋。如今每天上线就是刷体力完成每日就下了。<br>现在唯一好玩的的就是它出的危机合约了。🥱🥱🥱</p></blockquote><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;border-radius: 12px"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113407286052207&bvid=BV1NgSRYbEAQ&cid=26564363331&p=1" page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 80%; width: 100%;border-radius: 12px"> </iframe></div><blockquote><p>新出的塑心皮肤还是很好看的。喜欢😍😍😍</p></blockquote><p><img src="/img/youxin/%E5%A1%91%E5%BF%83.jpg"><br><img src="/img/youxin/%E5%A1%91%E5%BF%831.jpg"></p><h3 id="11月3日"><a href="#11月3日" class="headerlink" title="11月3日"></a>11月3日</h3><blockquote><p>看完CS,2024BLAST全球总决赛。<br>恭喜G2夺冠</p></blockquote><p><img src="/img/youxin/G2.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C# if、swatch学习笔记</title>
      <link href="/2024/10/30/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
      <url>/2024/10/30/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本人是一名初学者，欢迎各位大佬指正。<br>记录自己学习c#过程中的心得体会。</p></blockquote><p><font size="6"> C# if、switch的基本关系与使用 </font><br></p><blockquote><p>1.if语句有两种表达方式，第1种是包含 else 部分的 if 语句根据布尔表达式的值选择两个语句中的一个来执行，如以下示例所示：</p></blockquote><figure class="highlight c#"><figcaption><span>if else...</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">int</span> number=Convert.ToInt32(Console.ReadLine()); <span class="comment">//定义一个整数</span></span><br><span class="line">           <span class="keyword">if</span> (number &gt;= <span class="number">0</span>)  <span class="comment">//条件</span></span><br><span class="line">           &#123;</span><br><span class="line">                  Console.WriteLine(<span class="string">&quot;博主好帅&quot;</span>); <span class="comment">// 满足条件输出</span></span><br><span class="line">            &#125;</span><br><span class="line">             <span class="keyword">else</span>  </span><br><span class="line">             &#123;</span><br><span class="line">                  Console.WriteLine(<span class="string">&quot;博主最帅&quot;</span>); <span class="comment">//不满足条件输出</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.第二种是else嵌套if语句可以判断多个条件：</p></blockquote><figure class="highlight c#"><figcaption><span>else-if...</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> number=Convert.ToInt32(Console.ReadLine());  <span class="comment">//定义一个整数</span></span><br><span class="line">            <span class="keyword">if</span> (number == <span class="number">0</span>)  <span class="comment">//条件1</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;YOU&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (number &gt; <span class="number">0</span>)  <span class="comment">//条件2</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;XIAN&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (number &lt; <span class="number">0</span>)  <span class="comment">//条件3</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;YU&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (number != <span class="number">0</span>)  <span class="comment">//条件4</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;YOUXIANYU&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;XX&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.switch语句是根据与匹配表达式匹配的模式来选择要执行的语句列表，如以下示例所示：</p></blockquote><figure class="highlight c#"><figcaption><span>输入4个整数，判断最大值和最小值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">switch</span>语句2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">int</span> a = Convert.ToInt32(Console.ReadLine());  <span class="comment">//定义一个整数</span></span><br><span class="line">            <span class="built_in">int</span> b = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">            <span class="built_in">int</span> c = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">            <span class="built_in">int</span> d = Convert.ToInt32(Console.ReadLine());</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> max = a, min = a;  <span class="comment">//赋值</span></span><br><span class="line">            <span class="keyword">if</span> (max &lt; b)  </span><br><span class="line">            &#123;</span><br><span class="line">                max = b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; c)</span><br><span class="line">            &#123;</span><br><span class="line">                max = c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; d)</span><br><span class="line">            &#123;</span><br><span class="line">                max = d;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; b)</span><br><span class="line">            &#123;</span><br><span class="line">                min = b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; c)</span><br><span class="line">            &#123;</span><br><span class="line">                min = c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; d)</span><br><span class="line">            &#123;</span><br><span class="line">                min = d;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;最大的值&#123;0&#125;，最小的值&#123;1&#125;.&quot;</span>, max, min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Csharp编程基础 </category>
          
          <category> Visual Studio 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Csharp </tag>
            
            <tag> Visual Studio 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何安装Adobe AfterEffects 2022</title>
      <link href="/2024/10/29/%E6%BC%AB%E5%89%AA/"/>
      <url>/2024/10/29/%E6%BC%AB%E5%89%AA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是我第一次写博客,就写一个自己热爱的漫剪。<br>1.所以就从安装Adobe AfterEffects 2022开始，分享一下软件的安装教程吧！<br>后续还会有更多的教程分享！</p></blockquote><h1 id="Adobe-AfterEffects-2022-安装教程"><a href="#Adobe-AfterEffects-2022-安装教程" class="headerlink" title="Adobe AfterEffects 2022 安装教程"></a><em><strong>Adobe AfterEffects 2022 安装教程</strong></em></h1><h2 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h2><blockquote><p>2.首先，你需要到Adobe官网下载安装包，地址为：</p></blockquote><p> <a href="https://www.adobe.com/products/aftereffects.html">https://www.adobe.com/products/aftereffects.html</a></p><blockquote><p>哈哈，上面是正版Adobe软件，主要是给公司、和团队使用（如果不使用正版懂得懂得😜😜😜）<br>个人使用就用汉化版的就行啦↓<br><a href="https://www.rjctx.com/">https://www.rjctx.com/</a> </p></blockquote><p> 1.第一步进入网站，在搜索框里输入<b>Adobe After Efects</b>, 选择你喜欢的版本下载。</p><blockquote><p><b>温馨提示：版本上的不同软件上会有一定上的区别，还有就是后续的教学会使用到插件如果版本太高或太低就会出现插件上我有的效果你没有和效果不一样。</p></blockquote><p><img src="https://s2.loli.net/2024/10/31/WboNGvH9trF7xnQ.png" alt="AE.png"></p><p>2.随便选一个你喜欢的方式下载：<br>    <img src="https://s2.loli.net/2024/10/31/xFQiIahM61ly2SC.png" alt="AE.png"></p><blockquote><p><b>温馨提示2：下好的安装包可以放在除C盘的任意盘中但安装路径默认C盘就行，了解过AE的都知道经常会崩溃放在C盘会减少这种事情的发生（电脑好就不必理会）</b></p></blockquote><p>3.等它安装好就可以使用啦！！！😊😊😊</p>]]></content>
      
      
      <categories>
          
          <category> AE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Adobe After Effects 2022 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
